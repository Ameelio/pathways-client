[{"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx":"1","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts":"2","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx":"3","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts":"4","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts":"5","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts":"6","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx":"7","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx":"8","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts":"9","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts":"10","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts":"11","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx":"12","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts":"13","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx":"14","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js":"15","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts":"16","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/menu/Sidebar.tsx":"17","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/utils.ts":"18","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/useUserMedia.ts":"19","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/CallFeedback/index.tsx":"20"},{"size":647,"mtime":1611778860986,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1611065414704,"results":"23","hashOfConfig":"22"},{"size":2351,"mtime":1613741381219,"results":"24","hashOfConfig":"22"},{"size":945,"mtime":1611148817492,"results":"25","hashOfConfig":"22"},{"size":1569,"mtime":1611153156296,"results":"26","hashOfConfig":"22"},{"size":1951,"mtime":1612189174250,"results":"27","hashOfConfig":"22"},{"size":658,"mtime":1611065414698,"results":"28","hashOfConfig":"22"},{"size":2714,"mtime":1611794723464,"results":"29","hashOfConfig":"22"},{"size":1119,"mtime":1611794732718,"results":"30","hashOfConfig":"22"},{"size":1954,"mtime":1612189173551,"results":"31","hashOfConfig":"22"},{"size":934,"mtime":1613668098057,"results":"32","hashOfConfig":"22"},{"size":8279,"mtime":1613744656390,"results":"33","hashOfConfig":"22"},{"size":1065,"mtime":1613670059076,"results":"34","hashOfConfig":"22"},{"size":16876,"mtime":1613737062509,"results":"35","hashOfConfig":"22"},{"size":7581,"mtime":1613733803521,"results":"36","hashOfConfig":"22"},{"size":1100,"mtime":1611795033032,"results":"37","hashOfConfig":"22"},{"size":1210,"mtime":1612189173616,"results":"38","hashOfConfig":"22"},{"size":1815,"mtime":1613743293638,"results":"39","hashOfConfig":"22"},{"size":738,"mtime":1611243263638,"results":"40","hashOfConfig":"22"},{"size":1442,"mtime":1612189173975,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1xn4t4d",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx",[],["93","94"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx",["95","96","97","98"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ConnectedRouter, push } from \"connected-react-router\";\nimport { Layout } from \"antd\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport { History } from \"history\";\nimport ProtectedRoute, {\n  ProtectedRouteProps,\n} from \"./components/hocs/ProtectedRoute\";\nimport LoginPage from \"src/pages/Login\";\nimport { ROUTES } from \"./utils/constants\";\nimport { useEffect } from \"react\";\nimport { fetchConnections } from \"./redux/modules/connection\";\nimport Sidebar from \"./components/menu/Sidebar\";\n\nconst { Footer, Header } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n  pathname: state.router.location.pathname,\n});\nconst mapDispatchToProps = { fetchConnections, push };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction App({\n  session,\n  history,\n  pathname,\n  fetchConnections,\n  push,\n}: PropsFromRedux & { history: History }) {\n  const defaultProtectedRouteProps: ProtectedRouteProps = {\n    isAuthenticated: session.authInfo.token !== \"\", // TODO: improve this later\n    authenticationPath: \"/login\",\n  };\n\n  useEffect(() => {\n    if (session.isLoggedIn) fetchConnections();\n  }, [session.isLoggedIn]);\n\n  return (\n    <ConnectedRouter history={history}>\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Sidebar\n          navigate={(path: string) => push(path)}\n          isVisible={session.isLoggedIn}\n          pathname={pathname}\n        />\n        <Layout>\n          <Switch>\n            <Route exact path=\"/login\" component={LoginPage}></Route>\n            {ROUTES.map((route) => (\n              <ProtectedRoute\n                exact\n                {...defaultProtectedRouteProps}\n                path={route.path}\n                component={route.component}\n                key={route.label}\n              ></ProtectedRoute>\n            ))}\n            <Redirect to=\"/login\" />\n          </Switch>\n          {/* <Footer style={{ textAlign: \"center\" }}>\n            Connect Â©2021 Created by Ameelio Inc.\n          </Footer> */}\n        </Layout>\n      </Layout>\n    </ConnectedRouter>\n  );\n}\n\nexport default connector(App);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts",["99"],"import { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { History, createBrowserHistory } from \"history\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { sessionReducer } from \"./modules/session\";\nimport { callSlice } from \"./modules/call\";\nimport { connectionSlice } from \"./modules/connection\";\n\nexport const history = createBrowserHistory();\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    session: sessionReducer,\n    calls: callSlice.reducer,\n    connections: connectionSlice.reducer,\n    router: connectRouter(history),\n  });\nexport const rootReducer = createRootReducer(history);\n\nexport const Store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(routerMiddleware(history)),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx",["100","101"],"import React, { useState, ReactElement } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Input, Layout, Button, Form, Checkbox, Typography, Card } from \"antd\";\n\n// import { ReactComponent as Operator } from \"src/assets/avatars/bald.svg\";\n// import { ReactComponent as Supervisor } from \"src/assets/avatars/woman.svg\";\n// import { ReactComponent as Admin } from \"src/assets/avatars/professor.svg\";\n// import { ReactComponent as Investigator } from \"src/assets/avatars/investigator.svg\";\n// import { OPERATOR, SUPERVISOR, ADMIN, INVESTIGATOR } from \"src/data/sample\";\n\nimport \"./index.css\";\nimport { Redirect } from \"react-router\";\nimport { loginWithCredentials } from \"src/api/User\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\n\nconst { Content } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction LoginContainer({ session }: PropsFromRedux): ReactElement {\n  const [error, setError] = useState(\"\");\n\n  if (session.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onFinish = async (values: any) => {\n    try {\n      await loginWithCredentials({\n        inmateNumber: values.inmateNumber,\n        pin: values.pin,\n      });\n    } catch (err) {\n      setError(\"Invalid ID or Pin Code\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    setError(\"Invalid ID or Pin Code\");\n  };\n\n  return (\n    <Content>\n      <Card className=\"login-form-container\">\n        <Typography.Title level={3}>Welcome to Pathways!</Typography.Title>\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          className=\"login-form\"\n        >\n          <Form.Item\n            name=\"inmateNumber\"\n            rules={[{ required: true, message: \"Inmate ID is required.\" }]}\n          >\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Inmate Number\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"pin\"\n            rules={[{ required: true, message: \"Password is required.\" }]}\n          >\n            <Input.Password\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Pin Code\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" size=\"large\" block>\n              Log In\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </Content>\n  );\n}\n\nexport default connector(LoginContainer);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts",["102"],"import { API_URL, fetchTimeout } from \"./Common\";\nimport url from \"url\";\nimport { setSession } from \"src/redux/modules/session\";\nimport { Store } from \"src/redux\";\nimport { REMEMBER_TOKEN_KEY, TOKEN_KEY } from \"src/utils/constants\";\nimport { User } from \"src/types/User\";\n\nasync function initializeSession(body: any) {\n  const user = body.data.user as User;\n  const { token, id } = body.data.user;\n  Store.dispatch(\n    setSession({\n      user,\n      authInfo: { token, id, type: \"inmate\" },\n      isLoggedIn: true,\n    })\n  );\n\n  // TO\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport async function loginWithCredentials(cred: {\n  inmateNumber: string;\n  pin: string;\n}): Promise<void> {\n  const response = await fetchTimeout(url.resolve(API_URL, \"inmate/auth\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      node_id: 2,\n      inmate_number: cred.inmateNumber,\n      pin: cred.pin,\n    }),\n  });\n  const body = await response.json();\n  if (body.status !== 200) throw body;\n  await initializeSession(body);\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts",["103"],"import { Store } from \"src/redux\";\nimport url from \"url\";\nimport path from \"path\";\n// import { getApprovedConnections } from \"./Connection\";\n// import { getContacts, getInmates, getStaff } from \"./Persona\";\n\nexport const API_URL = `${process.env.REACT_APP_BASE_URL}api/`;\n\nconsole.log(process.env.REACT_APP_BASE_URL);\nexport interface ApiResponse {\n  date: number;\n  good: boolean;\n  status?: \"OK\" | \"ERROR\" | \"succeeded\" | 200;\n  message?: string;\n  data: Record<string, unknown> | Record<string, unknown>[] | unknown;\n}\n\nexport function fetchTimeout(\n  fetchUrl: string,\n  options: Record<string, unknown>,\n  timeout = 15000\n): Promise<Response> {\n  return Promise.race([\n    fetch(fetchUrl, { ...options, mode: \"cors\" }),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => reject(new Error(\"timeout\")), timeout)\n    ),\n  ]);\n}\n\nexport function toQueryString(options: string[][]) {\n  return options.map((x) => x[0] + \"=\" + encodeURIComponent(x[1])).join(\"&\");\n}\n\nexport async function fetchAuthenticated(\n  fetchUrl: string,\n  options: Record<string, unknown> = {},\n  timeout = 15000\n): Promise<ApiResponse> {\n  const state = Store.getState();\n\n  const requestOptions = {\n    ...options,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.session.authInfo.token}`,\n      \"X-Ameelio-User-Type\": \"inmate\",\n      \"X-Ameelio-Inmate-Id\": `${state.session.authInfo.id}`,\n    },\n  };\n\n  console.log(\n    url.resolve(`${API_URL}/inmate/${state.session.authInfo.id}`, fetchUrl)\n  );\n  const response = await fetchTimeout(\n    `${API_URL}/inmate/${state.session.authInfo.id}/${fetchUrl}`,\n    requestOptions,\n    timeout\n  );\n\n  const body = await response.json();\n\n  return body;\n}\n\n// export async function initializeAppData() {\n//   await Promise.allSettled([\n//     getInmates(),\n//     getApprovedConnections(),\n//     getStaff(),\n//     getContacts(),\n//   ]);\n// }\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx",["104","105","106","107","108","109","110","111","112","113","114"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx",["115","116","117"],"import React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"src/redux\";\nimport RoomClient from \"src/pages/Call/RoomClient\";\nimport * as mediasoupClient from \"mediasoup-client\";\nimport io from \"socket.io-client\";\nimport {\n  Button,\n  Space,\n  Spin,\n  Typography,\n  Layout,\n  PageHeader,\n  Input,\n  Divider,\n  Avatar,\n  Badge,\n} from \"antd\";\nimport { CallMessage, CallParticipant } from \"src/types/Call\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { selectAllCallInfo } from \"src/redux/selectors\";\nimport \"./index.css\";\nimport {\n  AudioMutedOutlined,\n  AudioOutlined,\n  MessageOutlined,\n  PoweroffOutlined,\n  ShopTwoTone,\n  VideoCameraOutlined,\n} from \"@ant-design/icons\";\nimport { format } from \"date-fns\";\nimport { useUserMedia } from \"./useUserMedia\";\nimport { push } from \"connected-react-router\";\nimport { HEARTBEAT_INTERVAL, WRAPPER_PADDING } from \"src/utils/constants\";\nimport {\n  genFullName,\n  getInitials,\n  openNotificationWithIcon,\n  showToast,\n} from \"src/utils/utils\";\n\nconst { Sider } = Layout;\ndeclare global {\n  interface Window {\n    Debug: any;\n  }\n}\n\nfunction Loader({ message }: { message: string }): ReactElement {\n  return (\n    <div className=\"video-loading-spinner\">\n      <Spin tip={message} />\n    </div>\n  );\n}\n\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: {\n    width: { min: 640, ideal: 1920 },\n    height: { min: 400, ideal: 1080 },\n  },\n};\n\nfunction MessageDisplay({ message }: { message: CallMessage }): ReactElement {\n  const { type } = message.from;\n  const getDisplayName = () => {\n    switch (type) {\n      case \"inmate\":\n        return \"You\";\n      case \"monitor\":\n        return \"DOC\";\n      case \"user\":\n        return \"Loved One\";\n    }\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      align={type === \"inmate\" ? \"end\" : \"start\"}\n      style={{ width: \"100%\" }}\n    >\n      <Space>\n        <Typography.Text strong>{getDisplayName()}</Typography.Text>\n        <Typography.Text type=\"secondary\">\n          {format(new Date(message.timestamp), \"HH:mm\")}\n        </Typography.Text>\n      </Space>\n      <Typography.Text>{message.content}</Typography.Text>\n    </Space>\n  );\n}\n\ntype TParams = { id: string };\n\nconst mapStateToProps = (\n  state: RootState,\n  ownProps: RouteComponentProps<TParams>\n) => ({\n  call: selectAllCallInfo(state, parseInt(ownProps.match.params.id)),\n  authInfo: state.session.authInfo,\n  initials: getInitials(genFullName(state.session.user)),\n});\n\nconst mapDispatchToProps = { push };\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst CallBase: React.FC<PropsFromRedux> = React.memo(\n  ({ call, authInfo, push, initials }) => {\n    const [isAuthed, setIsAuthed] = useState(false);\n    const [rc, setRc] = useState<RoomClient>();\n    const [socket, setSocket] = useState<SocketIOClient.Socket>();\n    const [showOverlay, setShowOverlay] = useState(true);\n    const [participantHasJoined, setParticipantHasJoined] = useState(false);\n    const [chatCollapsed, setChatCollapsed] = useState(false);\n    const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n    const [draftMessage, setDraftMessage] = useState(\"\");\n    const [messages, setMessages] = useState<CallMessage[]>([]);\n    const [audioOn, setAudioOn] = useState(true);\n    const [videoOn, setVideoOn] = useState(true);\n    const [hasUnreadMessages, setHasUnreadMessages] = useState(false);\n    const [peerAudioOn, setPeerAudioOn] = useState(true);\n    const [peerVideoOn, setPeerVideoOn] = useState(true);\n\n    const meRef = useRef<HTMLVideoElement>(null);\n    if (meRef.current && !meRef.current.srcObject && mediaStream) {\n      meRef.current.srcObject = mediaStream;\n    }\n    useEffect(() => {\n      if (!socket) {\n        const s = io.connect(\n          `${process.env.REACT_APP_MEDIASOUP_HOSTNAME}` || \"localhost:8000\"\n          // {\n          //   transports: [\"websocket\"],\n          // }\n        );\n        setSocket(s);\n      }\n      return () => {\n        socket?.close();\n      };\n    }, [setSocket, socket]);\n\n    const joinRoom = useCallback(async () => {\n      if (!call) return;\n      const rc = new RoomClient(mediasoupClient, socket, call.id);\n      await rc.init();\n\n      setRc(rc);\n    }, [call, socket]);\n\n    // Asynchronously load the room\n    useEffect(() => {\n      if (!isAuthed && socket && call) {\n        (async () => {\n          console.log(socket);\n          if (!socket.connected) {\n            console.log(\"Not connected, so waiting until connected.\");\n            window.Debug = socket;\n            await new Promise((resolve) => socket.on(\"connect\", resolve));\n            console.log(\"OK\");\n          }\n\n          await new Promise((resolve) => {\n            // TODO fetch actual credentials from redux\n            socket.emit(\n              \"authenticate\",\n              {\n                type: authInfo.type,\n                id: authInfo.id,\n                token: authInfo.token,\n              },\n              resolve\n            );\n          });\n          await joinRoom();\n          setIsAuthed(true);\n        })();\n      }\n    }, [call, authInfo, socket, joinRoom, isAuthed]);\n\n    useEffect(() => {\n      if (rc && isAuthed) {\n        (async () => {\n          // Enumerate media devices\n          const devices = await navigator.mediaDevices.enumerateDevices();\n\n          console.log(devices);\n\n          // Get a video input (should be the only one) to send\n          const videoInput = Array.from(devices).filter(\n            (device) => device.kind === \"videoinput\"\n          )[0];\n\n          console.log(\"producing video\");\n\n          // Produce video with it\n          await rc.produce(\"videoType\", videoInput);\n\n          // Get a audio input (should be the only one) to send\n\n          // Don't produce audio for now\n          const audioInput = Array.from(devices).filter(\n            (device) => device.kind === \"audioinput\"\n          )[0];\n\n          console.log(\"producing audio\");\n\n          // Produce video with it\n          await rc.produce(\"audioType\", audioInput);\n        })();\n      }\n    }, [isAuthed, rc]);\n\n    // TODO fix this\n    useEffect(() => {\n      if (rc && isAuthed) {\n        console.log(\"listening to text message\");\n        rc.socket.on(\n          \"textMessage\",\n          async ({\n            from,\n            contents,\n            meta,\n          }: {\n            from: CallParticipant;\n            contents: string;\n            meta: string;\n          }) => {\n            setHasUnreadMessages(true);\n            if (from.type === \"monitor\") {\n              openNotificationWithIcon(\"DOC Warning\", contents, \"warning\");\n            }\n            setMessages((messages) => [\n              ...messages,\n              {\n                content: contents,\n                from,\n                timestamp: new Date().toLocaleDateString(),\n              },\n            ]);\n          }\n        );\n\n        rc.socket.on(\n          \"peerUpdate\",\n          async ({\n            from,\n            contents,\n          }: {\n            from: CallParticipant;\n            contents: {\n              producerId: string;\n              active: boolean;\n              type: \"audio\" | \"video\";\n            };\n          }) => {\n            from.type === \"user\" && contents.type === \"audio\"\n              ? setPeerAudioOn(contents.active)\n              : setPeerVideoOn(contents.active);\n          }\n        );\n      }\n    }, [isAuthed, rc]);\n\n    useEffect(() => {\n      if (!chatCollapsed) setHasUnreadMessages(false);\n    }, [hasUnreadMessages, chatCollapsed]);\n\n    useEffect(() => {\n      if (call && participantHasJoined)\n        showToast(\n          \"peerVideo\",\n          `${call.connection.user.firstName} turned ${\n            peerVideoOn ? \"on\" : \"off\"\n          } their video`,\n          \"info\"\n        );\n    }, [peerVideoOn, call, participantHasJoined]);\n\n    useEffect(() => {\n      if (call && participantHasJoined)\n        showToast(\n          \"peerAudio\",\n          `${call.connection.user.firstName} ${\n            peerAudioOn ? \"unmuted\" : \"muted`\"\n          } their microphone`,\n          \"info\"\n        );\n    }, [peerAudioOn, call, participantHasJoined]);\n\n    const measuredRef = useCallback(\n      (node) => {\n        if (node !== null && rc && isAuthed) {\n          (async () => {\n            rc.on(\n              \"consume\",\n              async (\n                kind: string,\n                stream: MediaStream,\n                user: CallParticipant\n              ) => {\n                if (node && user.type === \"user\") {\n                  if (kind === \"video\") {\n                    const video = document.createElement(\"video\");\n                    video.style.width = \"100%\";\n                    video.style.height = \"100%\";\n                    video.srcObject = stream;\n                    video.autoplay = true;\n                    node.appendChild(video);\n                  } else if (kind === \"audio\") {\n                    const audio = document.createElement(\"audio\");\n                    audio.srcObject = stream;\n                    audio.autoplay = true;\n                    node.appendChild(audio);\n                  }\n\n                  setParticipantHasJoined(true);\n                } else if (node && user.type === \"inmate\") {\n                }\n              }\n            );\n          })();\n        }\n      },\n      [rc, isAuthed]\n    );\n\n    useEffect(() => {\n      if (participantHasJoined && call)\n        openNotificationWithIcon(\n          `${call.connection.user.firstName} joined the call.`,\n          \"Your call will connect soon.\",\n          \"info\"\n        );\n    }, [participantHasJoined, call]);\n\n    if (!call) return <div />;\n\n    const getMessage = (): string => {\n      if (!isAuthed) {\n        return \"Initializing video call...\";\n      } else if (!participantHasJoined) {\n        return `Waiting for ${call.connection.user.firstName} to join the call...`;\n      }\n      return \"Loading...\";\n    };\n\n    let timeout: any;\n    const onMouseMove = () => {\n      setShowOverlay(true);\n      (() => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => setShowOverlay(false), 5000);\n      })();\n    };\n\n    const onSendMessage = async () => {\n      console.log(\"sending message\");\n      if (!socket || !call) return;\n      setDraftMessage(\"\");\n      //TODO add property sent and change image visibility depending on whether it actually went through\n      setMessages([\n        ...messages,\n        {\n          content: draftMessage,\n          from: {\n            type: \"inmate\",\n            id: authInfo.id,\n          },\n          timestamp: new Date().toLocaleDateString(),\n        },\n      ]);\n      const { participants } = await new Promise((resolve, reject) => {\n        socket.emit(\"info\", { callId: call.id }, resolve);\n      });\n      await new Promise((resolve) => {\n        // TODO fetch actual credentials from redux\n        socket.emit(\n          \"textMessage\",\n          {\n            callId: call.id,\n            contents: draftMessage,\n            recipients: participants,\n          },\n          resolve\n        );\n      });\n    };\n\n    return (\n      <Layout>\n        <div\n          className=\"video-wrapper ant-layout-content\"\n          ref={measuredRef}\n          onMouseMove={() => onMouseMove()}\n          onMouseOver={() => onMouseMove()}\n        >\n          {!peerVideoOn && (\n            <div className=\"vh-100 vw-100 d-flex\">\n              <Avatar\n                size={128}\n                style={{\n                  color: \"#fff\",\n                  backgroundColor: \"#00a2ae\",\n                  margin: \"auto\",\n                }}\n              >\n                {getInitials(genFullName(call.connection.user)).toUpperCase()}\n              </Avatar>\n            </div>\n          )}\n          {!peerAudioOn && (\n            <div className=\"peer-name-container\">\n              <AudioMutedOutlined className=\"peer-muted-audio\" />\n              <Typography.Text style={{ color: 'white', fontSize: 16 }}> {genFullName(call.connection.user)}</Typography.Text>\n            </div>\n          )}\n          {videoOn ? (\n            <video className=\"video-me\" autoPlay={true} ref={meRef} />\n          ) : (\n            <div className=\"video-me\" style={{ backgroundColor: \"black\" }}>\n              <Avatar\n                size={64}\n                style={{\n                  color: \"#f56a00\",\n                  backgroundColor: \"#fde3cf\",\n                  margin: \"auto\",\n                }}\n              >\n                {initials}\n              </Avatar>\n            </div>\n          )}\n          {!participantHasJoined && <Loader message={getMessage()} />}\n          {showOverlay && (\n            <Space\n              className=\"video-overlay-actions\"\n              align=\"center\"\n              size=\"large\"\n            >\n              <Button\n                shape=\"round\"\n                icon={\n                  audioOn ? (\n                    <AudioOutlined style={{ fontSize: 24 }} />\n                  ) : (\n                    <AudioMutedOutlined style={{ fontSize: 24 }} />\n                  )\n                }\n                size=\"large\"\n                danger={!audioOn}\n                type={audioOn ? \"default\" : \"primary\"}\n                onClick={() => {\n                  audioOn ? rc?.muteAudio() : rc?.unmuteAudio();\n                  showToast(\n                    \"microphone\",\n                    `You ${audioOn ? \"muted\" : \"unmuted\"} your microphone`,\n                    \"info\"\n                  );\n                  setAudioOn((audioOn) => !audioOn);\n                }}\n              />\n              <Button\n                shape=\"round\"\n                icon={<PoweroffOutlined color=\"red\" />}\n                size=\"large\"\n                onClick={() => push(`/feedback/${call?.id}`)}\n              />\n              <Button\n                shape=\"round\"\n                danger={!videoOn}\n                icon={\n                  videoOn ? (\n                    <VideoCameraOutlined style={{ fontSize: 24 }} />\n                  ) : (\n                    <VideoCameraOutlined style={{ fontSize: 24 }} />\n                  )\n                }\n                size=\"large\"\n                type={videoOn ? \"default\" : \"primary\"}\n                onClick={() => {\n                  videoOn ? rc?.disableWebcam() : rc?.enableWebcam();\n                  showToast(\n                    \"webcam\",\n                    `You ${videoOn ? \"turned off\" : \"turned on\"} your webcam`,\n                    \"info\"\n                  );\n                  setVideoOn((isVideoOn) => !isVideoOn);\n                }}\n              />\n              <Button\n                shape=\"round\"\n                style={{ backgroundColor: chatCollapsed ? \"#fff\" : \"#f5f5f5\" }}\n                icon={\n                  chatCollapsed ? (\n                    <Badge dot={hasUnreadMessages}>\n                      <MessageOutlined style={{ fontSize: 24 }} />\n                    </Badge>\n                  ) : (\n                    <MessageOutlined style={{ fontSize: 24 }} />\n                  )\n                }\n                size=\"large\"\n                onClick={() => {\n                  if (chatCollapsed) setHasUnreadMessages(false);\n                  setChatCollapsed((collapsed) => !collapsed);\n                }}\n              />\n            </Space>\n          )}\n        </div>\n        {(!chatCollapsed || showOverlay) && (\n          <Sider\n            theme=\"light\"\n            style={{ height: \"100vh\", maxHeight: \"100vh\" }}\n            width={300}\n            collapsible\n            collapsed={chatCollapsed}\n            onCollapse={(collapsed) => setChatCollapsed(collapsed)}\n          >\n            {!chatCollapsed && <PageHeader title=\"Chat\" />}\n\n            {!chatCollapsed && (\n              <div className=\"chat-container\" style={WRAPPER_PADDING}>\n                <Space direction=\"vertical\" style={{ overflowY: \"scroll\" }}>\n                  {messages.map((message) => (\n                    <MessageDisplay message={message} />\n                  ))}\n                </Space>\n                <div className=\"chat-input\">\n                  <Divider />\n                  <Input.TextArea\n                    value={draftMessage}\n                    rows={2}\n                    onChange={(e) => setDraftMessage(e.target.value)}\n                    onPressEnter={(_e) => onSendMessage()}\n                    onSubmit={(_e) => onSendMessage()}\n                    placeholder=\"Type here...\"\n                    autoFocus\n                    bordered={false}\n                  />\n                </div>\n              </div>\n            )}\n          </Sider>\n        )}\n      </Layout>\n    );\n  }\n);\n\nexport default connector(CallBase);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js",[],["118","119"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts",["120"],"import {\n  createSlice,\n  createEntityAdapter,\n  createAsyncThunk,\n} from \"@reduxjs/toolkit\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { Connection } from \"src/types/Connection\";\nimport { Inmate } from \"src/types/User\";\nimport { fetchAuthenticated } from \"src/api/Common\";\n\nexport const fetchConnections = createAsyncThunk(\n  \"connections/fetchAll\",\n  async () => {\n    const body = await fetchAuthenticated(`connections`);\n    if (body.status !== 200) {\n      throw body;\n    }\n\n    const connections = ((body.data as Record<string, unknown>)\n      .connections as Connection[]).map((inmate) => camelcaseKeys(inmate));\n\n    return connections;\n  }\n);\n\nexport const connectionAdapter = createEntityAdapter<Connection>();\n\nexport const connectionSlice = createSlice({\n  name: \"connection\",\n  initialState: connectionAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchConnections.fulfilled, (state, action) => {\n      connectionAdapter.setAll(state, action.payload);\n    });\n  },\n});\n\nexport const connectionActions = connectionSlice.actions;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/menu/Sidebar.tsx",["121","122","123","124"],"import React, { ReactElement, useState } from \"react\";\nimport { Menu, Layout } from \"antd\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\n\nconst { Header, Content, Footer, Sider } = Layout;\ninterface Props {\n  navigate: (path: string) => void;\n  isVisible: boolean;\n  pathname: string;\n}\n\nexport default function Sidebar({\n  navigate,\n  isVisible,\n  pathname,\n}: Props): ReactElement {\n  const [collapsed, setCollapsed] = useState(false);\n\n  if (\n    !isVisible ||\n    pathname.indexOf(\"call\") !== -1 ||\n    pathname.indexOf(\"feedback\") !== -1\n  )\n    return <div />;\n  return (\n    <Sider\n      theme=\"light\"\n      collapsible\n      collapsed={collapsed}\n      onCollapse={() => setCollapsed((collapsed) => !collapsed)}\n    >\n      <div className=\"logo\" />\n      <Menu mode=\"inline\" defaultSelectedKeys={[\"home\"]}>\n        <Menu.Item\n          key=\"home\"\n          icon={<HomeOutlined />}\n          onClick={() => navigate(\"home\")}\n        >\n          Home\n        </Menu.Item>\n        {/* <Menu.Item\n          key=\"contacts\"\n          icon={<UserOutlined />}\n          onClick={() => navigate(\"home\")}\n        >\n          Contacts\n        </Menu.Item> */}\n      </Menu>\n    </Sider>\n  );\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/utils.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/useUserMedia.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/CallFeedback/index.tsx",["125","126"],"import React, { ReactElement } from \"react\";\nimport { Layout, Rate, Button, Space, Typography, Card } from \"antd\";\nimport {\n  FrownOutlined,\n  HeartOutlined,\n  SmileOutlined,\n  MehOutlined,\n} from \"@ant-design/icons\";\n\ninterface Props {}\n\nconst desc = [\"terrible\", \"bad\", \"normal\", \"good\", \"wonderful\"];\nconst customIcons = {\n  1: <FrownOutlined style={{ fontSize: 36 }} />,\n  2: <FrownOutlined style={{ fontSize: 36 }} />,\n  3: <MehOutlined style={{ fontSize: 36 }} />,\n  4: <SmileOutlined style={{ fontSize: 36 }} />,\n  5: <SmileOutlined style={{ fontSize: 36 }} />,\n};\n\nfunction CallFeedbackBase({}: Props): ReactElement {\n  return (\n    <Layout.Content\n      style={{\n        backgroundColor: \"white\",\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n      }}\n    >\n      <Space\n        direction=\"vertical\"\n        align=\"center\"\n        style={{ margin: \"auto\" }}\n        size=\"large\"\n      >\n        <Typography.Title level={2}>You left the meeting.</Typography.Title>\n        <Space>\n          <Button size=\"large\">Rejoin</Button>\n          <Button type=\"primary\" size=\"large\">\n            Return home\n          </Button>\n        </Space>\n        <Card title=\"How was the audio and video?\">\n          <Rate\n            character={<HeartOutlined style={{ fontSize: 36 }} />}\n            tooltips={desc}\n          />\n        </Card>\n      </Space>\n    </Layout.Content>\n  );\n}\n\nexport default CallFeedbackBase;\n",{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":2,"column":8,"nodeType":"133","messageId":"134","endLine":2,"endColumn":12},{"ruleId":"131","severity":1,"message":"135","line":19,"column":9,"nodeType":"133","messageId":"134","endLine":19,"endColumn":15},{"ruleId":"131","severity":1,"message":"136","line":19,"column":17,"nodeType":"133","messageId":"134","endLine":19,"endColumn":23},{"ruleId":"137","severity":1,"message":"138","line":45,"column":6,"nodeType":"139","endLine":45,"endColumn":26,"suggestions":"140"},{"ruleId":"131","severity":1,"message":"141","line":4,"column":26,"nodeType":"133","messageId":"134","endLine":4,"endColumn":46},{"ruleId":"131","severity":1,"message":"142","line":4,"column":39,"nodeType":"133","messageId":"134","endLine":4,"endColumn":47},{"ruleId":"131","severity":1,"message":"143","line":28,"column":10,"nodeType":"133","messageId":"134","endLine":28,"endColumn":15},{"ruleId":"131","severity":1,"message":"144","line":5,"column":10,"nodeType":"133","messageId":"134","endLine":5,"endColumn":28},{"ruleId":"131","severity":1,"message":"145","line":3,"column":8,"nodeType":"133","messageId":"134","endLine":3,"endColumn":12},{"ruleId":"131","severity":1,"message":"146","line":11,"column":3,"nodeType":"133","messageId":"134","endLine":11,"endColumn":7},{"ruleId":"131","severity":1,"message":"147","line":25,"column":10,"nodeType":"133","messageId":"134","endLine":25,"endColumn":18},{"ruleId":"131","severity":1,"message":"148","line":35,"column":10,"nodeType":"133","messageId":"134","endLine":35,"endColumn":20},{"ruleId":"131","severity":1,"message":"149","line":37,"column":3,"nodeType":"133","messageId":"134","endLine":37,"endColumn":19},{"ruleId":"131","severity":1,"message":"150","line":38,"column":3,"nodeType":"133","messageId":"134","endLine":38,"endColumn":18},{"ruleId":"131","severity":1,"message":"151","line":39,"column":3,"nodeType":"133","messageId":"134","endLine":39,"endColumn":20},{"ruleId":"131","severity":1,"message":"152","line":40,"column":3,"nodeType":"133","messageId":"134","endLine":40,"endColumn":22},{"ruleId":"131","severity":1,"message":"136","line":43,"column":9,"nodeType":"133","messageId":"134","endLine":43,"endColumn":15},{"ruleId":"131","severity":1,"message":"135","line":43,"column":17,"nodeType":"133","messageId":"134","endLine":43,"endColumn":23},{"ruleId":"131","severity":1,"message":"153","line":43,"column":25,"nodeType":"133","messageId":"134","endLine":43,"endColumn":30},{"ruleId":"131","severity":1,"message":"154","line":44,"column":9,"nodeType":"133","messageId":"134","endLine":44,"endColumn":13},{"ruleId":"131","severity":1,"message":"155","line":8,"column":10,"nodeType":"133","messageId":"134","endLine":8,"endColumn":21},{"ruleId":"131","severity":1,"message":"156","line":35,"column":3,"nodeType":"133","messageId":"134","endLine":35,"endColumn":14},{"ruleId":"131","severity":1,"message":"157","line":41,"column":10,"nodeType":"133","messageId":"134","endLine":41,"endColumn":28},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"158","line":8,"column":10,"nodeType":"133","messageId":"134","endLine":8,"endColumn":16},{"ruleId":"131","severity":1,"message":"159","line":3,"column":10,"nodeType":"133","messageId":"134","endLine":3,"endColumn":22},{"ruleId":"131","severity":1,"message":"136","line":5,"column":9,"nodeType":"133","messageId":"134","endLine":5,"endColumn":15},{"ruleId":"131","severity":1,"message":"160","line":5,"column":17,"nodeType":"133","messageId":"134","endLine":5,"endColumn":24},{"ruleId":"131","severity":1,"message":"135","line":5,"column":26,"nodeType":"133","messageId":"134","endLine":5,"endColumn":32},{"ruleId":"131","severity":1,"message":"161","line":13,"column":7,"nodeType":"133","messageId":"134","endLine":13,"endColumn":18},{"ruleId":"162","severity":1,"message":"163","line":21,"column":27,"nodeType":"164","messageId":"165","endLine":21,"endColumn":36},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","'Header' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchConnections'. Either include it or remove the dependency array. If 'fetchConnections' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["168"],"'getDefaultMiddleware' is defined but never used.","'Checkbox' is defined but never used.","'error' is assigned a value but never used.","'REMEMBER_TOKEN_KEY' is defined but never used.","'path' is defined but never used.","'Menu' is defined but never used.","'BaseCall' is defined but never used.","'Connection' is defined but never used.","'EllipsisOutlined' is defined but never used.","'UserAddOutlined' is defined but never used.","'VideoCameraFilled' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'Sider' is assigned a value but never used.","'Meta' is assigned a value but never used.","'useSelector' is defined but never used.","'ShopTwoTone' is defined but never used.","'HEARTBEAT_INTERVAL' is defined but never used.","'Inmate' is defined but never used.","'UserOutlined' is defined but never used.","'Content' is assigned a value but never used.","'customIcons' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [fetchConnections, session.isLoggedIn]",{"range":"171","text":"172"},[1394,1414],"[fetchConnections, session.isLoggedIn]"]