[{"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx":"1","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts":"2","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx":"3","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts":"4","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts":"5","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts":"6","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx":"7","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx":"8","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts":"9","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts":"10","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts":"11","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx":"12","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts":"13","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx":"14","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js":"15","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts":"16"},{"size":647,"mtime":1611065414699,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1611065414704,"results":"19","hashOfConfig":"18"},{"size":1932,"mtime":1611148828248,"results":"20","hashOfConfig":"18"},{"size":945,"mtime":1611148817492,"results":"21","hashOfConfig":"18"},{"size":1570,"mtime":1611073716888,"results":"22","hashOfConfig":"18"},{"size":419,"mtime":1611069664160,"results":"23","hashOfConfig":"18"},{"size":658,"mtime":1611065414698,"results":"24","hashOfConfig":"18"},{"size":2643,"mtime":1611067379401,"results":"25","hashOfConfig":"18"},{"size":1119,"mtime":1611076993615,"results":"26","hashOfConfig":"18"},{"size":1823,"mtime":1611085056037,"results":"27","hashOfConfig":"18"},{"size":918,"mtime":1611152438214,"results":"28","hashOfConfig":"18"},{"size":1368,"mtime":1611085420505,"results":"29","hashOfConfig":"18"},{"size":262,"mtime":1611074006167,"results":"30","hashOfConfig":"18"},{"size":5026,"mtime":1611100590667,"results":"31","hashOfConfig":"18"},{"size":7208,"mtime":1611068812767,"results":"32","hashOfConfig":"18"},{"size":1094,"mtime":1611152465541,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1xn4t4d",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx",[],["73","74"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx",["75","76"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts",["77"],"import { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { History, createBrowserHistory } from \"history\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { sessionReducer } from \"./modules/session\";\nimport { callSlice } from \"./modules/call\";\nimport { connectionSlice } from \"./modules/connection\";\n\nexport const history = createBrowserHistory();\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    session: sessionReducer,\n    calls: callSlice.reducer,\n    connections: connectionSlice.reducer,\n    router: connectRouter(history),\n  });\nexport const rootReducer = createRootReducer(history);\n\nexport const Store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(routerMiddleware(history)),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx",["78","79"],"import React, { useState, ReactElement } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Input, Layout, Button, Form, Checkbox } from \"antd\";\n\n// import { ReactComponent as Operator } from \"src/assets/avatars/bald.svg\";\n// import { ReactComponent as Supervisor } from \"src/assets/avatars/woman.svg\";\n// import { ReactComponent as Admin } from \"src/assets/avatars/professor.svg\";\n// import { ReactComponent as Investigator } from \"src/assets/avatars/investigator.svg\";\n// import { OPERATOR, SUPERVISOR, ADMIN, INVESTIGATOR } from \"src/data/sample\";\n\nimport \"./index.css\";\nimport { Redirect } from \"react-router\";\nimport { loginWithCredentials } from \"src/api/User\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\n\nconst { Content } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction LoginContainer({ session }: PropsFromRedux): ReactElement {\n  const [error, setError] = useState(\"\");\n\n  if (session.isLoggedIn) return <Redirect to=\"/\" />;\n\n  const onFinish = async (values: any) => {\n    try {\n      await loginWithCredentials({\n        inmateNumber: values.inmateNumber,\n        pin: values.pin,\n      });\n    } catch (err) {\n      setError(\"Invalid ID or Pin Code\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    setError(\"Invalid ID or Pin Code\");\n  };\n\n  return (\n    <Content>\n      <div className=\"login-form\">\n        <div className=\"login-form-right-column\" />\n        <Form\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            name=\"inmateNumber\"\n            rules={[{ required: true, message: \"Inmate ID is required.\" }]}\n          >\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Inmate Number\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"pin\"\n            rules={[{ required: true, message: \"Password is required.\" }]}\n          >\n            <Input.Password\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Pin Code\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Content>\n  );\n}\n\nexport default connector(LoginContainer);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts",["80"],"import { API_URL, fetchTimeout } from \"./Common\";\nimport url from \"url\";\nimport { setSession } from \"src/redux/modules/session\";\nimport { Store } from \"src/redux\";\nimport { REMEMBER_TOKEN_KEY, TOKEN_KEY } from \"src/utils/constants\";\nimport { User } from \"src/types/User\";\n\nasync function initializeSession(body: any) {\n  const user = body.data.user as User;\n  const { token, id } = body.data.user;\n  Store.dispatch(\n    setSession({\n      user,\n      authInfo: { token, id, type: 'inmate' },\n      isLoggedIn: true,\n    })\n  );\n\n  // TO\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport async function loginWithCredentials(cred: {\n  inmateNumber: string;\n  pin: string;\n}): Promise<void> {\n  const response = await fetchTimeout(url.resolve(API_URL, \"inmate/auth\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      node_id: 2,\n      inmate_number: cred.inmateNumber,\n      pin: cred.pin,\n    }),\n  });\n  const body = await response.json();\n  if (body.status !== 200) throw body;\n  await initializeSession(body);\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts",["81","82","83"],"import { Store } from \"src/redux\";\nimport url from \"url\";\nimport path from \"path\";\n// import { getApprovedConnections } from \"./Connection\";\n// import { getContacts, getInmates, getStaff } from \"./Persona\";\n\nexport const API_URL = `${process.env.REACT_APP_BASE_URL}api/`;\n\nexport interface ApiResponse {\n  date: number;\n  good: boolean;\n  status?: \"OK\" | \"ERROR\" | \"succeeded\" | 200;\n  message?: string;\n  data: Record<string, unknown> | Record<string, unknown>[] | unknown;\n}\n\nexport function fetchTimeout(\n  fetchUrl: string,\n  options: Record<string, unknown>,\n  timeout = 15000\n): Promise<Response> {\n  return Promise.race([\n    fetch(fetchUrl, { ...options, mode: \"cors\" }),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => reject(new Error(\"timeout\")), timeout)\n    ),\n  ]);\n}\n\nexport function toQueryString(options: string[][]) {\n  return options.map((x) => x[0] + \"=\" + encodeURIComponent(x[1])).join(\"&\");\n}\n\nexport async function fetchAuthenticated(\n  fetchUrl: string,\n  options: Record<string, unknown> = {},\n  timeout = 15000\n): Promise<ApiResponse> {\n  const state = Store.getState();\n\n  const requestOptions = {\n    ...options,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.session.authInfo.token}`,\n      [\"X-Ameelio-User-Type\"]: \"inmate\",\n      ['X-Ameelio-Inmate-Id']: `${state.session.authInfo.id}`\n    },\n  };\n\n  const response = await fetchTimeout(\n    path.join(API_URL, `inmate/${state.session.authInfo.id}`, fetchUrl),\n    requestOptions,\n    timeout\n  );\n\n  const body = await response.json();\n\n  return body;\n}\n\n// export async function initializeAppData() {\n//   await Promise.allSettled([\n//     getInmates(),\n//     getApprovedConnections(),\n//     getStaff(),\n//     getContacts(),\n//   ]);\n// }\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx",["84","85","86"],"import React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"src/redux\";\nimport RoomClient from \"src/pages/Call/RoomClient\";\nimport * as mediasoupClient from \"mediasoup-client\";\nimport io from \"socket.io-client\";\nimport { Spin } from \"antd\";\nimport { Call } from \"src/types/Call\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { selectCallById } from \"src/redux/selectors\";\n\ndeclare global {\n  interface Window {\n    Debug: any;\n  }\n}\n\ntype TParams = { id: string };\n\nconst mapStateToProps = (\n  state: RootState,\n  ownProps: RouteComponentProps<TParams>\n) => ({\n  call: selectCallById(state, ownProps.match.params.id),\n  authInfo: state.session.authInfo,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction Loader(): ReactElement {\n  return (\n    <div className=\"video-loading-spinner\">\n      <Spin tip=\"Loading video call...\" />\n    </div>\n  );\n}\n\nconst CallBase: React.FC<PropsFromRedux> = React.memo(({ call, authInfo }) => {\n  const [loading, setLoading] = useState(false);\n  const [isAuthed, setIsAuthed] = useState(false);\n  const [rc, setRc] = useState<RoomClient>();\n  const [socket, setSocket] = useState<SocketIOClient.Socket>();\n\n  useEffect(() => {\n    if (!socket) {\n      const s = io.connect(\n        `${process.env.REACT_APP_MEDIASOUP_HOSTNAME}` || \"localhost:8000\",\n        {\n          transports: [\"websocket\"],\n        }\n      );\n      setSocket(s);\n    }\n    \n  }, [setSocket, socket]);\n\n  const joinRoom = useCallback(async () => {\n    if (!call) return;\n    const rc = new RoomClient(mediasoupClient, socket, call.id);\n    console.log(\"heree\");\n    await rc.init();\n    console.log(\"inited\");\n\n    setRc(rc);\n  }, [call, socket]);\n\n  // Asynchronously load the room\n  useEffect(() => {\n    setLoading(true);\n    if (!isAuthed && socket && call) {\n      (async () => {\n        console.log(socket);\n        if (!socket.connected) {\n          console.log(\"Not connected, so waiting until connected.\");\n          window.Debug = socket;\n          await new Promise((resolve) => socket.on(\"connect\", resolve));\n          console.log(\"OK\");\n        }\n\n        await new Promise((resolve) => {\n          // TODO fetch actual credentials from redux\n          socket.emit(\n            \"authenticate\",\n            {\n              type: authInfo.type,\n              id: authInfo.id,\n              token: authInfo.token,\n            },\n            resolve\n          );\n        });\n        await joinRoom();\n        console.log(\"init room\");\n        setIsAuthed(true);\n      })();\n    }\n  }, [call, authInfo, socket, joinRoom, isAuthed]);\n\n  useEffect(() => {\n    if (rc && isAuthed) {\n      console.log(\"herewqkeoqkeowq\");\n      (async () => {\n        // Enumerate media devices\n        const devices = await navigator.mediaDevices.enumerateDevices();\n\n        console.log(devices);\n\n        // Get a video input (should be the only one) to send\n        const videoInput = Array.from(devices).filter(\n          (device) => device.kind === \"videoinput\"\n        )[0];\n\n        console.log(\"producing video\");\n\n        // Produce video with it\n        await rc.produce(\"videoType\", videoInput);\n\n        // Get a audio input (should be the only one) to send\n\n        // Don't produce audio for now\n        const audioInput = Array.from(devices).filter(\n          (device) => device.kind === \"audioinput\"\n        )[0];\n\n        console.log(\"producing audio\");\n\n        // Produce video with it\n        await rc.produce(\"audioType\", audioInput);\n      })();\n    }\n  }, [isAuthed, rc]);\n\n  const measuredRef = useCallback(\n    (node) => {\n      if (node !== null && rc && isAuthed) {\n        (async () => {\n          rc.on(\n            \"consume\",\n            async (\n              kind: string,\n              stream: MediaStream,\n              user: { type: string; id: number }\n            ) => {\n              if (node) {\n                if (kind === \"video\") {\n                  const video = document.createElement(\"video\");\n                  video.style.width = \"100%\";\n                  video.style.height = \"100%\";\n                  video.srcObject = stream;\n                  video.autoplay = true;\n                  node.appendChild(video);\n                } else if (kind === \"audio\") {\n                  const audio = document.createElement(\"audio\");\n                  audio.srcObject = stream;\n                  audio.autoplay = true;\n                  node.appendChild(audio);\n                }\n\n                setLoading(false);\n              }\n            }\n          );\n        })();\n      }\n    },\n    [rc, isAuthed]\n  );\n\n  return (\n    <div\n      className=\"video-wrapper\"\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n      ref={measuredRef}\n    >\n      {loading && <Loader />}\n    </div>\n  );\n});\n\nexport default connector(CallBase);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js",[],["87","88"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts",["89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":12},{"ruleId":"98","severity":1,"message":"99","line":36,"column":6,"nodeType":"100","endLine":36,"endColumn":26,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"102","line":4,"column":26,"nodeType":"96","messageId":"97","endLine":4,"endColumn":46},{"ruleId":"94","severity":1,"message":"103","line":4,"column":39,"nodeType":"96","messageId":"97","endLine":4,"endColumn":47},{"ruleId":"94","severity":1,"message":"104","line":28,"column":10,"nodeType":"96","messageId":"97","endLine":28,"endColumn":15},{"ruleId":"94","severity":1,"message":"105","line":5,"column":10,"nodeType":"96","messageId":"97","endLine":5,"endColumn":28},{"ruleId":"94","severity":1,"message":"106","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":11},{"ruleId":"107","severity":1,"message":"108","line":47,"column":7,"nodeType":"109","messageId":"110","endLine":47,"endColumn":40,"fix":"111"},{"ruleId":"107","severity":1,"message":"112","line":48,"column":7,"nodeType":"109","messageId":"110","endLine":48,"endColumn":62,"fix":"113"},{"ruleId":"94","severity":1,"message":"114","line":5,"column":3,"nodeType":"96","messageId":"97","endLine":5,"endColumn":9},{"ruleId":"94","severity":1,"message":"115","line":8,"column":10,"nodeType":"96","messageId":"97","endLine":8,"endColumn":21},{"ruleId":"94","severity":1,"message":"116","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":14},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"117","line":8,"column":10,"nodeType":"96","messageId":"97","endLine":8,"endColumn":16},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchConnections'. Either include it or remove the dependency array. If 'fetchConnections' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["120"],"'getDefaultMiddleware' is defined but never used.","'Checkbox' is defined but never used.","'error' is assigned a value but never used.","'REMEMBER_TOKEN_KEY' is defined but never used.","'url' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"X-Ameelio-User-Type\"] found.","Property","unnecessarilyComputedProperty",{"range":"121","text":"122"},"Unnecessarily computed property ['X-Ameelio-Inmate-Id'] found.",{"range":"123","text":"124"},"'useRef' is defined but never used.","'useSelector' is defined but never used.","'Call' is defined but never used.","'Inmate' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},[1318,1341],"\"X-Ameelio-User-Type\"",[1359,1382],"'X-Ameelio-Inmate-Id'","Update the dependencies array to be: [fetchConnections, session.isLoggedIn]",{"range":"127","text":"128"},[1218,1238],"[fetchConnections, session.isLoggedIn]"]