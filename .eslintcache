[{"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx":"1","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts":"2","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx":"3","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts":"4","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts":"5","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts":"6","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx":"7","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx":"8","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts":"9","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts":"10"},{"size":647,"mtime":1611065197232,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611065197236,"results":"13","hashOfConfig":"12"},{"size":1881,"mtime":1611065197229,"results":"14","hashOfConfig":"12"},{"size":773,"mtime":1611065197235,"results":"15","hashOfConfig":"12"},{"size":1519,"mtime":1611065197236,"results":"16","hashOfConfig":"12"},{"size":277,"mtime":1611065197239,"results":"17","hashOfConfig":"12"},{"size":658,"mtime":1611065197231,"results":"18","hashOfConfig":"12"},{"size":2797,"mtime":1611065197234,"results":"19","hashOfConfig":"12"},{"size":2927,"mtime":1611065197231,"results":"20","hashOfConfig":"12"},{"size":1621,"mtime":1611065197230,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xn4t4d",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts",[],["48","49"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx",["50"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Layout } from \"antd\";\nimport { Route, Switch } from \"react-router\";\nimport { History } from \"history\";\nimport ProtectedRoute, { ProtectedRouteProps } from \"./components/hocs/ProtectedRoute\";\nimport LoginPage from \"src/pages/Login\";\nimport { ROUTES } from \"./utils/constants\";\nimport { loginWithToken } from \"./api/User\";\nimport { useEffect } from \"react\";\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n});\nconst mapDispatchToProps = {};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction App({ session, history }: PropsFromRedux & { history: History }) {\n  const defaultProtectedRouteProps: ProtectedRouteProps = {\n    isAuthenticated: session.authInfo.apiToken !== \"\", // TODO: improve this later\n    authenticationPath: \"/login\",\n  };\n\n  useEffect(() => {\n    // localStorage.setItem(\"debug\", \"*\");\n    localStorage.removeItem(\"debug\");\n    (async () => {\n      try {\n        await loginWithToken();\n        // await loadData();\n      } catch (err) {}\n    })();\n  }, []);\n\n  return (\n    <ConnectedRouter history={history}>\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Switch>\n          <Route exact path=\"/\" component={LoginPage}></Route>\n          {ROUTES.map((route) => (\n            <ProtectedRoute\n              exact\n              {...defaultProtectedRouteProps}\n              path={route.path}\n              component={route.component}\n              key={route.label}\n            ></ProtectedRoute>\n          ))}\n        </Switch>\n      </Layout>\n    </ConnectedRouter>\n  );\n}\n\nexport default connector(App);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts",["51"],"import { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { History, createBrowserHistory } from \"history\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { sessionReducer } from \"./modules/session\";\n\nexport const history = createBrowserHistory();\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    session: sessionReducer,\n    router: connectRouter(history),\n  });\n  export const rootReducer = createRootReducer(history);\n\n  export const Store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(routerMiddleware(history)),\n  });\n  \n  export type RootState = ReturnType<typeof rootReducer>;\n\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx",["52"],"import React, { useState, ReactElement } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Input, Layout, Button, Form, Checkbox } from 'antd';\n\n// import { ReactComponent as Operator } from \"src/assets/avatars/bald.svg\";\n// import { ReactComponent as Supervisor } from \"src/assets/avatars/woman.svg\";\n// import { ReactComponent as Admin } from \"src/assets/avatars/professor.svg\";\n// import { ReactComponent as Investigator } from \"src/assets/avatars/investigator.svg\";\n// import { OPERATOR, SUPERVISOR, ADMIN, INVESTIGATOR } from \"src/data/sample\";\n\nimport \"./index.css\";\nimport { Redirect } from \"react-router\";\nimport { loginWithCredentials } from \"src/api/User\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\n\nconst { Content } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction LoginContainer({ session }: PropsFromRedux): ReactElement {\n  const [error, setError] = useState(\"\");\n\n  if (session.isLoggedIn) return <Redirect to=\"/\" />;\n\n  const onFinish = async (values: any) => {\n    try {\n      await loginWithCredentials({email: values.email, password: values.password, remember: values.remember });\n    } catch (err) {\n      setError(\"Invalid email or password\");\n    }\n  };\n\n   const onFinishFailed = (errorInfo: any) => {\n    setError(\"Invalid email or password\");\n  };\n\n  return (\n      <Content>\n        <div className=\"login-form\"> \n          <div className=\"login-form-right-column\" />\n          <Form\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[{ required: true, message: 'Email is required.' }]}\n          >\n            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Email\"/>\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, message: 'Password is required.' }]}\n          >\n            <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Password\"/>\n          </Form.Item>\n\n          <Form.Item name=\"remember\" valuePropName=\"checked\">\n            <Checkbox>Remember me</Checkbox>\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>  \n      </div>\n      </Content>\n  );\n}\n\nexport default connector(LoginContainer);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts",["53"],"import { API_URL, fetchAuthenticated, fetchTimeout } from \"./Common\";\nimport url from \"url\";\nimport { setSession } from \"src/redux/modules/session\";\nimport { Store } from \"src/redux\";\nimport { REMEMBER_TOKEN_KEY, TOKEN_KEY } from \"src/utils/constants\";\nimport { User } from \"src/types/User\";\n\ninterface RawUser {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  addr_line_1: string;\n  addr_line_2: string;\n  city: string;\n  state: string;\n  postal: string;\n  credit: number;\n  coins: number;\n  profile_img_path: string;\n  phone: string;\n  referer: string;\n  country: string;\n  created_at: string;\n  referral_link: string;\n}\n\nfunction cleanUser(user: RawUser): User {\n  return {\n    id: user.id,\n    firstName: user.first_name,\n    lastName: user.last_name,\n    email: user.email,\n    profileImgPath: user.profile_img_path,\n  };\n}\n\nasync function initializeSession(body: any) {\n  const user = cleanUser(body.data as RawUser);\n  const { token: apiToken, remember: rememberToken } = body.data;\n  Store.dispatch(\n    setSession({\n      user,\n      authInfo: { rememberToken, apiToken },\n      isLoggedIn: true,\n    })\n  );\n\n  // TO\n  localStorage.setItem(TOKEN_KEY, apiToken);\n  localStorage.setItem(REMEMBER_TOKEN_KEY, rememberToken);\n  // loadData();\n}\n\nexport async function loginWithToken(): Promise<void> {\n  try {\n    const rememberToken = await localStorage.getItem(REMEMBER_TOKEN_KEY);\n    if (!rememberToken) {\n      throw Error(\"Cannot load token\");\n    }\n    const response = await fetchTimeout(\n      url.resolve(API_URL, \"auth/login/remember\"),\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          remember: rememberToken,\n        }),\n      }\n    );\n    const body = await response.json();\n    if (body.status !== 200) throw body;\n    await initializeSession(body);\n  } catch (err) {\n    throw Error(err);\n  }\n}\n\nexport async function loginWithCredentials(cred: {\n    email: string;\n    password: string;\n    remember?: boolean;\n  }): Promise<void> {\n  const response = await fetchTimeout(url.resolve(API_URL, \"auth/login\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      email: cred.email,\n      password: cred.password,\n    }),\n  });\n  const body = await response.json();\n  if (body.status !== 200) throw body;\n  console.log(body);\n  // const user = cleanUser(body.data as RawUser);\n  // const { token: apiToken, remember: rememberToken } = body.data;\n  // Store.dispatch(\n  //   setSession({\n  //     user,\n  //     authInfo: { rememberToken, apiToken },\n  //     isLoggedIn: true,\n  //   })\n  // );\n  // // TO\n  // localStorage.setItem(TOKEN_KEY, apiToken);\n  // localStorage.setItem(REMEMBER_TOKEN_KEY, rememberToken);\n  await initializeSession(body);\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts",["54"],"import { Store } from \"src/redux\";\nimport url from \"url\";\n// import { getApprovedConnections } from \"./Connection\";\n// import { getContacts, getInmates, getStaff } from \"./Persona\";\n\nexport const API_URL = `${process.env.REACT_APP_BASE_URL}api/`;\n\nexport interface ApiResponse {\n  date: number;\n  good: boolean;\n  status?: \"OK\" | \"ERROR\" | \"succeeded\" | 200;\n  message?: string;\n  data: Record<string, unknown> | Record<string, unknown>[] | unknown;\n}\n\nexport function fetchTimeout(\n  fetchUrl: string,\n  options: Record<string, unknown>,\n  timeout = 15000\n): Promise<Response> {\n  return Promise.race([\n    fetch(fetchUrl, { ...options, mode: \"cors\" }),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => reject(new Error(\"timeout\")), timeout)\n    ),\n  ]);\n}\n\nexport function toQueryString(options: string[][]) {\n  return options.map((x) => x[0] + \"=\" + encodeURIComponent(x[1])).join(\"&\");\n}\n\nexport async function fetchAuthenticated(\n  fetchUrl: string,\n  options: Record<string, unknown> = {},\n  timeout = 15000\n): Promise<ApiResponse> {\n  const state = Store.getState();\n\n  const requestOptions = {\n    ...options,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.session.authInfo.apiToken}`,\n    },\n  };\n\n  const response = await fetchTimeout(\n    fetchUrl,\n    requestOptions,\n    timeout\n  );\n  const body = await response.json();\n  return body;\n}\n\n// export async function initializeAppData() {\n//   await Promise.allSettled([\n//     getInmates(),\n//     getApprovedConnections(),\n//     getStaff(),\n//     getContacts(),\n//   ]);\n// }\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":12},{"ruleId":"59","severity":1,"message":"63","line":4,"column":26,"nodeType":"61","messageId":"62","endLine":4,"endColumn":46},{"ruleId":"59","severity":1,"message":"64","line":28,"column":10,"nodeType":"61","messageId":"62","endLine":28,"endColumn":15},{"ruleId":"59","severity":1,"message":"65","line":1,"column":19,"nodeType":"61","messageId":"62","endLine":1,"endColumn":37},{"ruleId":"59","severity":1,"message":"66","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":11},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'getDefaultMiddleware' is defined but never used.","'error' is assigned a value but never used.","'fetchAuthenticated' is defined but never used.","'url' is defined but never used.","no-global-assign","no-unsafe-negation"]