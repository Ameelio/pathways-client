[{"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx":"1","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts":"2","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx":"3","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts":"4","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts":"5","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts":"6","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx":"7","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx":"8","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts":"9","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts":"10","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts":"11","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx":"12","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts":"13","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx":"14","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js":"15","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts":"16","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/menu/Sidebar.tsx":"17","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/utils.ts":"18","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/useUserMedia.ts":"19","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/CallFeedback/index.tsx":"20"},{"size":647,"mtime":1611778860986,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1611065414704,"results":"23","hashOfConfig":"22"},{"size":2350,"mtime":1611780337457,"results":"24","hashOfConfig":"22"},{"size":945,"mtime":1611148817492,"results":"25","hashOfConfig":"22"},{"size":1569,"mtime":1611153156296,"results":"26","hashOfConfig":"22"},{"size":1950,"mtime":1611952472013,"results":"27","hashOfConfig":"22"},{"size":658,"mtime":1611065414698,"results":"28","hashOfConfig":"22"},{"size":2714,"mtime":1611794723464,"results":"29","hashOfConfig":"22"},{"size":1119,"mtime":1611794732718,"results":"30","hashOfConfig":"22"},{"size":1946,"mtime":1611794909203,"results":"31","hashOfConfig":"22"},{"size":922,"mtime":1611795035875,"results":"32","hashOfConfig":"22"},{"size":7938,"mtime":1611779188427,"results":"33","hashOfConfig":"22"},{"size":476,"mtime":1611234034395,"results":"34","hashOfConfig":"22"},{"size":11486,"mtime":1611952489700,"results":"35","hashOfConfig":"22"},{"size":6333,"mtime":1611243259712,"results":"36","hashOfConfig":"22"},{"size":1100,"mtime":1611795033032,"results":"37","hashOfConfig":"22"},{"size":1190,"mtime":1611952887585,"results":"38","hashOfConfig":"22"},{"size":275,"mtime":1611252559083,"results":"39","hashOfConfig":"22"},{"size":738,"mtime":1611243263638,"results":"40","hashOfConfig":"22"},{"size":1367,"mtime":1611953489370,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1xn4t4d",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"44"},"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx",[],["95","96"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx",["97","98","99","100"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ConnectedRouter, push } from \"connected-react-router\";\nimport { Layout } from \"antd\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport { History } from \"history\";\nimport ProtectedRoute, {\n  ProtectedRouteProps,\n} from \"./components/hocs/ProtectedRoute\";\nimport LoginPage from \"src/pages/Login\";\nimport { ROUTES } from \"./utils/constants\";\nimport { useEffect } from \"react\";\nimport { fetchConnections } from \"./redux/modules/connection\";\nimport Sidebar from \"./components/menu/Sidebar\";\n\nconst { Footer, Header } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n  pathname: state.router.location.pathname,\n});\nconst mapDispatchToProps = { fetchConnections, push };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction App({\n  session,\n  history,\n  pathname,\n  fetchConnections,\n  push,\n}: PropsFromRedux & { history: History }) {\n  const defaultProtectedRouteProps: ProtectedRouteProps = {\n    isAuthenticated: session.authInfo.token !== \"\", // TODO: improve this later\n    authenticationPath: \"/login\",\n  };\n\n  useEffect(() => {\n    if (session.isLoggedIn) fetchConnections();\n  }, [session.isLoggedIn]);\n\n  return (\n    <ConnectedRouter history={history}>\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Sidebar\n          navigate={(path: string) => push(path)}\n          isVisible={session.isLoggedIn}\n          pathname={pathname}\n        />\n        <Layout>\n          <Switch>\n            <Route exact path=\"/login\" component={LoginPage}></Route>\n            {ROUTES.map((route) => (\n              <ProtectedRoute\n                exact\n                {...defaultProtectedRouteProps}\n                path={route.path}\n                component={route.component}\n                key={route.label}\n              ></ProtectedRoute>\n            ))}\n            <Redirect to=\"/login\" />\n          </Switch>\n          {/* <Footer style={{ textAlign: \"center\" }}>\n            Connect Â©2021 Created by Ameelio Inc.\n          </Footer> */}\n        </Layout>\n      </Layout>\n    </ConnectedRouter>\n  );\n}\n\nexport default connector(App);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts",["101"],"import { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { History, createBrowserHistory } from \"history\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { sessionReducer } from \"./modules/session\";\nimport { callSlice } from \"./modules/call\";\nimport { connectionSlice } from \"./modules/connection\";\n\nexport const history = createBrowserHistory();\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    session: sessionReducer,\n    calls: callSlice.reducer,\n    connections: connectionSlice.reducer,\n    router: connectRouter(history),\n  });\nexport const rootReducer = createRootReducer(history);\n\nexport const Store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(routerMiddleware(history)),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx",["102","103"],"import React, { useState, ReactElement } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Input, Layout, Button, Form, Checkbox, Typography, Card } from \"antd\";\n\n// import { ReactComponent as Operator } from \"src/assets/avatars/bald.svg\";\n// import { ReactComponent as Supervisor } from \"src/assets/avatars/woman.svg\";\n// import { ReactComponent as Admin } from \"src/assets/avatars/professor.svg\";\n// import { ReactComponent as Investigator } from \"src/assets/avatars/investigator.svg\";\n// import { OPERATOR, SUPERVISOR, ADMIN, INVESTIGATOR } from \"src/data/sample\";\n\nimport \"./index.css\";\nimport { Redirect } from \"react-router\";\nimport { loginWithCredentials } from \"src/api/User\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\n\nconst { Content } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction LoginContainer({ session }: PropsFromRedux): ReactElement {\n  const [error, setError] = useState(\"\");\n\n  if (session.isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onFinish = async (values: any) => {\n    try {\n      await loginWithCredentials({\n        inmateNumber: values.inmateNumber,\n        pin: values.pin,\n      });\n    } catch (err) {\n      setError(\"Invalid ID or Pin Code\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    setError(\"Invalid ID or Pin Code\");\n  };\n\n  return (\n    <Content>\n      <Card className=\"login-form-container\">\n        <Typography.Title level={3}>Welcome to Pathways!</Typography.Title>\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          className=\"login-form\"\n        >\n          <Form.Item\n            name=\"inmateNumber\"\n            rules={[{ required: true, message: \"Inmate ID is required.\" }]}\n          >\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Inmate Number\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"pin\"\n            rules={[{ required: true, message: \"Password is required.\" }]}\n          >\n            <Input.Password\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Pin Code\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" size=\"large\" block>\n              Log In\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </Content>\n  );\n}\n\nexport default connector(LoginContainer);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts",["104"],"import { API_URL, fetchTimeout } from \"./Common\";\nimport url from \"url\";\nimport { setSession } from \"src/redux/modules/session\";\nimport { Store } from \"src/redux\";\nimport { REMEMBER_TOKEN_KEY, TOKEN_KEY } from \"src/utils/constants\";\nimport { User } from \"src/types/User\";\n\nasync function initializeSession(body: any) {\n  const user = body.data.user as User;\n  const { token, id } = body.data.user;\n  Store.dispatch(\n    setSession({\n      user,\n      authInfo: { token, id, type: \"inmate\" },\n      isLoggedIn: true,\n    })\n  );\n\n  // TO\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport async function loginWithCredentials(cred: {\n  inmateNumber: string;\n  pin: string;\n}): Promise<void> {\n  const response = await fetchTimeout(url.resolve(API_URL, \"inmate/auth\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      node_id: 2,\n      inmate_number: cred.inmateNumber,\n      pin: cred.pin,\n    }),\n  });\n  const body = await response.json();\n  if (body.status !== 200) throw body;\n  await initializeSession(body);\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts",["105"],"import { Store } from \"src/redux\";\nimport url from \"url\";\nimport path from \"path\";\n// import { getApprovedConnections } from \"./Connection\";\n// import { getContacts, getInmates, getStaff } from \"./Persona\";\n\nexport const API_URL = `${process.env.REACT_APP_BASE_URL}api/`;\n\nconsole.log(process.env.REACT_APP_BASE_URL);\nexport interface ApiResponse {\n  date: number;\n  good: boolean;\n  status?: \"OK\" | \"ERROR\" | \"succeeded\" | 200;\n  message?: string;\n  data: Record<string, unknown> | Record<string, unknown>[] | unknown;\n}\n\nexport function fetchTimeout(\n  fetchUrl: string,\n  options: Record<string, unknown>,\n  timeout = 15000\n): Promise<Response> {\n  return Promise.race([\n    fetch(fetchUrl, { ...options, mode: \"cors\" }),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => reject(new Error(\"timeout\")), timeout)\n    ),\n  ]);\n}\n\nexport function toQueryString(options: string[][]) {\n  return options.map((x) => x[0] + \"=\" + encodeURIComponent(x[1])).join(\"&\");\n}\n\nexport async function fetchAuthenticated(\n  fetchUrl: string,\n  options: Record<string, unknown> = {},\n  timeout = 15000\n): Promise<ApiResponse> {\n  const state = Store.getState();\n\n  const requestOptions = {\n    ...options,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.session.authInfo.token}`,\n      \"X-Ameelio-User-Type\": \"inmate\",\n      \"X-Ameelio-Inmate-Id\": `${state.session.authInfo.id}`,\n    },\n  };\n\n  console.log(url.resolve(`${API_URL}/inmate/${state.session.authInfo.id}`, fetchUrl));\n  const response = await fetchTimeout(\n    `${API_URL}/inmate/${state.session.authInfo.id}/${fetchUrl}`,\n    requestOptions,\n    timeout\n  );\n\n  const body = await response.json();\n\n  return body;\n}\n\n// export async function initializeAppData() {\n//   await Promise.allSettled([\n//     getInmates(),\n//     getApprovedConnections(),\n//     getStaff(),\n//     getContacts(),\n//   ]);\n// }\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx",["106","107","108","109","110","111"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { fetchCalls } from \"src/redux/modules/call\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  Col,\n  Layout,\n  Menu,\n  PageHeader,\n  Row,\n  Space,\n  Typography,\n} from \"antd\";\nimport { selectAllCalls, selectAllConnections } from \"src/redux/selectors\";\nimport { push } from \"connected-react-router\";\nimport { differenceInMinutes, format } from \"date-fns\";\nimport { QUOTES, WRAPPER_PADDING } from \"src/utils/constants\";\nimport { Call } from \"src/types/Call\";\nimport { genFullName, getRandomItem } from \"src/utils/utils\";\nimport { Quote } from \"src/types/Common\";\nimport \"./index.css\";\nimport { Connection } from \"src/types/Connection\";\nimport {\n  EllipsisOutlined,\n  UserAddOutlined,\n  VideoCameraFilled,\n  VideoCameraOutlined,\n} from \"@ant-design/icons\";\n\nconst { Header, Footer, Sider, Content } = Layout;\nconst { Meta } = Card;\n\nconst mapStateToProps = (state: RootState) => ({\n  calls: selectAllCalls(state),\n  connections: selectAllConnections(state),\n  firstName: state.session.user.firstName,\n});\n\nconst mapDispatchToProps = { fetchCalls, push };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction DashboardPage({\n  calls,\n  connections,\n  fetchCalls,\n  push,\n  firstName,\n}: PropsFromRedux): ReactElement {\n  const [appointments, setAppointments] = useState<\n    { call: Call; connection: Connection }[]\n  >([]);\n  const [dailyQuote, setDailyQuote] = useState(getRandomItem(QUOTES) as Quote);\n\n  const [currTime, setCurrTime] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  });\n  useEffect(() => {\n    (async () => await fetchCalls())();\n  }, [fetchCalls]);\n\n  useEffect(() => {\n    // TODO sort\n    const upcoming = calls\n      .filter(\n        (call) =>\n          (call.status === \"scheduled\" || call.status === \"live\") &&\n          new Date(call.end) > new Date()\n      )\n      .map((call) => ({\n        call,\n        connection:\n          connections.find((connection) => connection.id === call.id) ||\n          ({\n            user: { firstName: \"\", lastName: \"\", profileImgPath: \"\" },\n          } as Connection),\n      }));\n\n    setAppointments(upcoming);\n  }, [calls, connections]);\n\n  const getStatusType = (\n    connection: Connection\n  ): \"success\" | \"warning\" | \"danger\" | \"secondary\" => {\n    switch (connection.status) {\n      case \"approved\":\n        return \"success\";\n      case \"pending\":\n        return \"warning\";\n      case \"rejected\":\n        return \"danger\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Content>\n        <PageHeader title={`Hi ${firstName}!`}></PageHeader>\n        <Space direction=\"vertical\" size=\"large\" style={WRAPPER_PADDING}>\n          <Row>\n            <Col span={24}>\n              <div>\n                <Space\n                  direction=\"vertical\"\n                  align=\"center\"\n                  style={{\n                    backgroundImage: `url(${dailyQuote.background})`,\n                    width: \"100%\",\n                  }}\n                  className=\"dashboard-header-container\"\n                >\n                  <Typography.Title\n                    level={3}\n                    className=\"dashboard-header-content\"\n                  >\n                    {format(currTime, \"HH:mm\")}\n                  </Typography.Title>\n                  <Typography.Title\n                    level={5}\n                    className=\"dashboard-header-content\"\n                  >\n                    {dailyQuote.quote}\n                  </Typography.Title>\n                  <Typography.Text className=\"dashboard-header-content\">\n                    {dailyQuote.author}\n                  </Typography.Text>\n                </Space>\n                <div style={{ width: \"100%\", backgroundColor: \"white\" }}>\n                  {!appointments.length && (\n                    <Card>\n                      <span>No upcoming calls today</span>\n                    </Card>\n                  )}\n                  {appointments.map((appointment) => {\n                    const tMinus = differenceInMinutes(\n                      new Date(appointment.call.start),\n                      new Date()\n                    );\n\n                    return (\n                      <Card key={appointment.call.id}>\n                        <Space size=\"large\">\n                          <Avatar\n                            src={appointment.connection.user.profileImgPath}\n                          />\n                          <div>\n                            <Typography.Title level={3}>\n                              Call with {appointment.connection.user.firstName}\n                            </Typography.Title>\n                            <Typography.Text>\n                              {format(\n                                new Date(appointment.call.start),\n                                \"HH:mm\"\n                              )}{\" \"}\n                              -{\" \"}\n                              {format(new Date(appointment.call.end), \"HH:mm\")}{\" \"}\n                              | {tMinus > 0 ? \"starts in \" : \"started \"}\n                              <Typography.Text\n                                type={tMinus >= 0 ? \"warning\" : \"danger\"}\n                              >\n                                {Math.abs(tMinus)} minutes{\" \"}\n                                {tMinus < 0 && \" ago\"}\n                              </Typography.Text>\n                            </Typography.Text>\n                          </div>\n                          <Space>\n                            <Button\n                              onClick={() =>\n                                push(`call/${appointment.call.id}`)\n                              }\n                            >\n                              <EllipsisOutlined />\n                            </Button>\n                            <Button\n                              type=\"primary\"\n                              onClick={() =>\n                                push(`call/${appointment.call.id}`)\n                              }\n                            >\n                              Join\n                            </Button>\n                          </Space>\n                        </Space>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Card>\n                <VideoCameraFilled />\n                <Typography.Title level={4}>Schedule Call</Typography.Title>\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card>\n                <UserAddOutlined />\n                <Typography.Title level={4}>Add Contact</Typography.Title>\n              </Card>\n            </Col>\n          </Row>\n        </Space>\n      </Content>\n      <Sider theme=\"light\" width={400}>\n        <PageHeader title={\"Your Loved Ones\"} />\n        {connections.map((connection) => (\n          <Card key={connection.id}>\n            <Card.Meta\n              title={genFullName(connection.user)}\n              avatar={<Avatar src={connection.user.profileImgPath} />}\n              description={\n                <Typography.Text type=\"secondary\">\n                  Status:{\" \"}\n                  <Typography.Text type={getStatusType(connection)}>\n                    {connection.status}\n                  </Typography.Text>\n                </Typography.Text>\n              }\n            ></Card.Meta>\n          </Card>\n        ))}\n      </Sider>\n    </Layout>\n  );\n}\n\nexport default connector(DashboardPage);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts",[],["112","113"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx",["114","115","116","117","118","119"],"import React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"src/redux\";\nimport RoomClient from \"src/pages/Call/RoomClient\";\nimport * as mediasoupClient from \"mediasoup-client\";\nimport io from \"socket.io-client\";\nimport {\n  Button,\n  Space,\n  Spin,\n  Typography,\n  Layout,\n  PageHeader,\n  Input,\n  Divider,\n} from \"antd\";\nimport { Call, CallMessage, CallParticipant } from \"src/types/Call\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { selectCallById } from \"src/redux/selectors\";\nimport \"./index.css\";\nimport {\n  AudioMutedOutlined,\n  AudioOutlined,\n  MessageOutlined,\n  PoweroffOutlined,\n  ShopTwoTone,\n  VideoCameraOutlined,\n} from \"@ant-design/icons\";\nimport { format } from \"date-fns\";\nimport { useUserMedia } from \"./useUserMedia\";\nimport { push } from \"connected-react-router\";\nimport { HEARTBEAT_INTERVAL, WRAPPER_PADDING } from \"src/utils/constants\";\n\nconst { Sider } = Layout;\ndeclare global {\n  interface Window {\n    Debug: any;\n  }\n}\n\ntype TParams = { id: string };\n\nconst mapStateToProps = (\n  state: RootState,\n  ownProps: RouteComponentProps<TParams>\n) => ({\n  call: selectCallById(state, ownProps.match.params.id),\n  authInfo: state.session.authInfo,\n});\n\nconst mapDispatchToProps = { push };\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction Loader({ message }: { message: string }): ReactElement {\n  return (\n    <div className=\"video-loading-spinner\">\n      <Spin tip={message} />\n    </div>\n  );\n}\n\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: {\n    width: { min: 640, ideal: 1920 },\n    height: { min: 400, ideal: 1080 },\n  },\n};\n\nfunction MessageDisplay({ message }: { message: CallMessage }): ReactElement {\n  const { type } = message.from;\n  const getDisplayName = () => {\n    switch (type) {\n      case \"inmate\":\n        return \"You\";\n      case \"monitor\":\n        return \"DOC\";\n      case \"user\":\n        return \"Loved One\";\n    }\n  };\n  return (\n    <Space\n      direction=\"vertical\"\n      align={type === \"inmate\" ? \"end\" : \"start\"}\n      style={{ width: \"100%\" }}\n    >\n      <Space>\n        <Typography.Text strong>{getDisplayName()}</Typography.Text>\n        <Typography.Text type=\"secondary\">\n          {format(new Date(message.timestamp), \"HH:mm\")}\n        </Typography.Text>\n      </Space>\n      <Typography.Text>{message.content}</Typography.Text>\n    </Space>\n  );\n}\n\nconst CallBase: React.FC<PropsFromRedux> = React.memo(\n  ({ call, authInfo, push }) => {\n    const [isAuthed, setIsAuthed] = useState(false);\n    const [rc, setRc] = useState<RoomClient>();\n    const [socket, setSocket] = useState<SocketIOClient.Socket>();\n    const [showOverlay, setShowOverlay] = useState(true);\n    const [participantHasJoined, setParticipantHasJoined] = useState(false);\n    const [chatCollapsed, setChatCollapsed] = useState(false);\n    const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n    const [draftMessage, setDraftMessage] = useState(\"\");\n    const [messages, setMessages] = useState<CallMessage[]>([]);\n\n    const meRef = useRef<HTMLVideoElement>(null);\n    if (meRef.current && !meRef.current.srcObject && mediaStream) {\n      meRef.current.srcObject = mediaStream;\n    }\n\n    useEffect(() => {\n      if (!socket) {\n        const s = io.connect(\n          `${process.env.REACT_APP_MEDIASOUP_HOSTNAME}` || \"localhost:8000\",\n          // {\n          //   transports: [\"websocket\"],\n          // }\n        );\n        setSocket(s);\n      }\n      return () => {\n        socket?.close();\n      };\n    }, [setSocket, socket]);\n\n    const joinRoom = useCallback(async () => {\n      if (!call) return;\n      const rc = new RoomClient(mediasoupClient, socket, call.id);\n      await rc.init();\n\n      setRc(rc);\n    }, [call, socket]);\n\n    // Asynchronously load the room\n    useEffect(() => {\n      if (!isAuthed && socket && call) {\n        (async () => {\n          console.log(socket);\n          if (!socket.connected) {\n            console.log(\"Not connected, so waiting until connected.\");\n            window.Debug = socket;\n            await new Promise((resolve) => socket.on(\"connect\", resolve));\n            console.log(\"OK\");\n          }\n\n          await new Promise((resolve) => {\n            // TODO fetch actual credentials from redux\n            socket.emit(\n              \"authenticate\",\n              {\n                type: authInfo.type,\n                id: authInfo.id,\n                token: authInfo.token,\n              },\n              resolve\n            );\n          });\n          await joinRoom();\n          setIsAuthed(true);\n        })();\n      }\n    }, [call, authInfo, socket, joinRoom, isAuthed]);\n\n    useEffect(() => {\n      if (rc && isAuthed) {\n        (async () => {\n          // Enumerate media devices\n          const devices = await navigator.mediaDevices.enumerateDevices();\n\n          console.log(devices);\n\n          // Get a video input (should be the only one) to send\n          const videoInput = Array.from(devices).filter(\n            (device) => device.kind === \"videoinput\"\n          )[0];\n\n          console.log(\"producing video\");\n\n          // Produce video with it\n          await rc.produce(\"videoType\", videoInput);\n\n          // Get a audio input (should be the only one) to send\n\n          // Don't produce audio for now\n          const audioInput = Array.from(devices).filter(\n            (device) => device.kind === \"audioinput\"\n          )[0];\n\n          console.log(\"producing audio\");\n\n          // Produce video with it\n          await rc.produce(\"audioType\", audioInput);\n        })();\n      }\n    }, [isAuthed, rc]);\n\n    useEffect(() => {\n      if (rc && isAuthed) {\n        console.log('listening to text message')\n        rc.socket.on(\n          \"textMessage\",\n          async ({from, contents, meta}: {from: CallParticipant, contents: string, meta: string}) => {\n            console.log(contents);\n            console.log(from);\n            setMessages([\n              ...messages,\n              {\n                content: contents,\n                from,\n                timestamp: new Date().toLocaleDateString(),\n              },\n            ]);\n          }\n        );\n      }\n    }, [isAuthed, rc]);\n\n    const measuredRef = useCallback(\n      (node) => {\n        if (node !== null && rc && isAuthed) {\n          (async () => {\n            rc.on(\n              \"consume\",\n              async (\n                kind: string,\n                stream: MediaStream,\n                user: CallParticipant\n              ) => {\n                console.log(`CONSUME RECEIVED: ${user.type} ${kind}`);\n                if (node && user.type === \"user\") {\n                  console.log(\"CONSUME: user stream\");\n                  if (kind === \"video\") {\n                    const video = document.createElement(\"video\");\n                    video.style.width = \"100%\";\n                    video.style.height = \"100%\";\n                    video.srcObject = stream;\n                    video.autoplay = true;\n                    node.appendChild(video);\n                  } else if (kind === \"audio\") {\n                    const audio = document.createElement(\"audio\");\n                    audio.srcObject = stream;\n                    audio.autoplay = true;\n                    node.appendChild(audio);\n                  }\n\n                  setParticipantHasJoined(true);\n                } else if (node && user.type === \"inmate\") {\n                }\n              }\n            );\n          })();\n        }\n      },\n      [rc, isAuthed]\n    );\n\n\n    const getMessage = (): string => {\n      if (!isAuthed) {\n        return \"Initializing video call...\";\n      } else if (!participantHasJoined) {\n        return `Waiting for ${\"Gabe\"} to join the call...`;\n      }\n      return \"Loading...\";\n    };\n\n    let timeout: any;\n    const onMouseMove = () => {\n      setShowOverlay(true);\n      (() => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => setShowOverlay(false), 5000);\n      })();\n    };\n\n    const onSendMessage = async () => {\n      console.log(\"sending message\");\n      if (!socket || !call) return;\n      setDraftMessage(\"\");\n      //TODO add property sent and change image visibility depending on whether it actually went through\n      setMessages([\n        ...messages,\n        {\n          content: draftMessage,\n          from: {\n            type: \"inmate\",\n            id: authInfo.id,\n          },\n          timestamp: new Date().toLocaleDateString(),\n        },\n      ]);\n      const { participants } = await new Promise((resolve, reject) => {\n        socket.emit(\"info\", { callId: call.id }, resolve);\n      });\n      await new Promise((resolve) => {\n        // TODO fetch actual credentials from redux\n        socket.emit(\n          \"textMessage\",\n          {\n            callId: call.id,\n            contents: draftMessage,\n            recipients: participants,\n          },\n          resolve\n        );\n      });\n    };\n\n    return (\n      <Layout>\n        <div\n          className=\"video-wrapper ant-layout-content\"\n          ref={measuredRef}\n          onMouseMove={() => onMouseMove()}\n        >\n          <video className=\"video-me\" autoPlay={true} ref={meRef} />\n          {!participantHasJoined && <Loader message={getMessage()} />}\n          {showOverlay && (\n            <Space className=\"video-overlay-actions\" align=\"center\">\n              <Button\n                shape=\"round\"\n                icon={true ? <AudioOutlined /> : <AudioMutedOutlined />}\n                size=\"large\"\n              />\n              <Button\n                shape=\"round\"\n                icon={<PoweroffOutlined />}\n                size=\"large\"\n                onClick={() => push(`/feedback/${call?.id}`) }\n              />\n              <Button\n                shape=\"round\"\n                icon={true ? <VideoCameraOutlined /> : <AudioMutedOutlined />}\n                size=\"large\"\n              />\n            </Space>\n          )}\n        </div>\n        {(!chatCollapsed || showOverlay) && (\n          <Sider\n            theme=\"light\"\n            style={{ height: \"100vh\", maxHeight: \"100vh\" }}\n            width={300}\n            collapsible\n            collapsed={chatCollapsed}\n            onCollapse={(collapsed) => setChatCollapsed(collapsed)}\n          >\n            {!chatCollapsed && <PageHeader title=\"Chat\" />}\n\n            {!chatCollapsed && (\n              <div className=\"chat-container\" style={WRAPPER_PADDING}>\n                <Space direction=\"vertical\" style={{ overflowY: \"scroll\" }}>\n                  {messages.map((message) => (\n                    <MessageDisplay message={message} />\n                  ))}\n                </Space>\n                <div className=\"chat-input\">\n                  <Divider />\n                  <Input.TextArea\n                    value={draftMessage}\n                    rows={2}\n                    onChange={(e) => setDraftMessage(e.target.value)}\n                    onPressEnter={(_e) => onSendMessage()}\n                    onSubmit={(_e) => onSendMessage()}\n                    placeholder=\"Type here...\"\n                    autoFocus\n                    bordered={false}\n                  />\n                </div>\n              </div>\n            )}\n          </Sider>\n        )}\n      </Layout>\n    );\n  }\n);\n\nexport default connector(CallBase);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js",[],["120","121"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts",["122"],"import {\n  createSlice,\n  createEntityAdapter,\n  createAsyncThunk,\n} from \"@reduxjs/toolkit\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { Connection } from \"src/types/Connection\";\nimport { Inmate } from \"src/types/User\";\nimport { fetchAuthenticated } from \"src/api/Common\";\n\nexport const fetchConnections = createAsyncThunk(\n  \"connections/fetchAll\",\n  async () => {\n    const body = await fetchAuthenticated(`connections`);\n    if (body.status !== 200) {\n      throw body;\n    }\n\n    const connections = ((body.data as Record<string, unknown>)\n      .connections as Connection[]).map((inmate) => camelcaseKeys(inmate));\n\n    return connections;\n  }\n);\n\nexport const connectionAdapter = createEntityAdapter<Connection>();\n\nexport const connectionSlice = createSlice({\n  name: \"connection\",\n  initialState: connectionAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchConnections.fulfilled, (state, action) => {\n      connectionAdapter.setAll(state, action.payload);\n    });\n  },\n});\n\nexport const connectionActions = connectionSlice.actions;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/menu/Sidebar.tsx",["123","124","125","126"],"import React, { ReactElement, useState } from \"react\";\nimport { Menu, Layout } from \"antd\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\n\nconst { Header, Content, Footer, Sider } = Layout;\ninterface Props {\n  navigate: (path: string) => void;\n  isVisible: boolean;\n  pathname: string;\n}\n\nexport default function Sidebar({\n  navigate,\n  isVisible,\n  pathname,\n}: Props): ReactElement {\n  const [collapsed, setCollapsed] = useState(false);\n\n  if (!isVisible || pathname.indexOf(\"call\") !== -1 || pathname.indexOf(\"feedback\") !== -1) return <div />;\n  return (\n    <Sider\n      theme=\"light\"\n      collapsible\n      collapsed={collapsed}\n      onCollapse={() => setCollapsed((collapsed) => !collapsed)}\n    >\n      <div className=\"logo\" />\n      <Menu mode=\"inline\" defaultSelectedKeys={[\"home\"]}>\n        <Menu.Item\n          key=\"home\"\n          icon={<HomeOutlined />}\n          onClick={() => navigate(\"home\")}\n        >\n          Home\n        </Menu.Item>\n        {/* <Menu.Item\n          key=\"contacts\"\n          icon={<UserOutlined />}\n          onClick={() => navigate(\"home\")}\n        >\n          Contacts\n        </Menu.Item> */}\n      </Menu>\n    </Sider>\n  );\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/utils.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/useUserMedia.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/CallFeedback/index.tsx",["127","128"],"import React, { ReactElement } from \"react\";\nimport { Layout, Rate, Button, Space, Typography, Card } from \"antd\";\nimport {\n  FrownOutlined,\n  HeartOutlined,\n  SmileOutlined,\n  MehOutlined,\n} from \"@ant-design/icons\";\n\ninterface Props {}\n\nconst desc = [\"terrible\", \"bad\", \"normal\", \"good\", \"wonderful\"];\nconst customIcons = {\n  1: <FrownOutlined style={{ fontSize: 36 }} />,\n  2: <FrownOutlined style={{ fontSize: 36 }}/>,\n  3: <MehOutlined style={{ fontSize: 36 }} />,\n  4: <SmileOutlined style={{ fontSize: 36 }}/>,\n  5: <SmileOutlined style={{ fontSize: 36 }}/>,\n};\n\nfunction CallFeedbackBase({}: Props): ReactElement {\n  return (\n    <Layout.Content\n      style={{\n        backgroundColor: \"white\",\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n      }}\n    >\n      <Space direction=\"vertical\" align=\"center\" style={{ margin: \"auto\" }} size=\"large\">\n        <Typography.Title level={2}>You left the meeting.</Typography.Title>\n        <Space>\n          <Button size=\"large\">Rejoin</Button>\n          <Button type=\"primary\" size=\"large\">\n            Return home\n          </Button>\n        </Space>\n        <Card title=\"How was the audio and video?\">\n            <Rate character={<HeartOutlined style={{ fontSize: 36 }}/>} tooltips={desc}/>\n        </Card>\n\n      </Space>\n    </Layout.Content>\n  );\n}\n\nexport default CallFeedbackBase;\n",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":12},{"ruleId":"133","severity":1,"message":"137","line":19,"column":9,"nodeType":"135","messageId":"136","endLine":19,"endColumn":15},{"ruleId":"133","severity":1,"message":"138","line":19,"column":17,"nodeType":"135","messageId":"136","endLine":19,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":45,"column":6,"nodeType":"141","endLine":45,"endColumn":26,"suggestions":"142"},{"ruleId":"133","severity":1,"message":"143","line":4,"column":26,"nodeType":"135","messageId":"136","endLine":4,"endColumn":46},{"ruleId":"133","severity":1,"message":"144","line":4,"column":39,"nodeType":"135","messageId":"136","endLine":4,"endColumn":47},{"ruleId":"133","severity":1,"message":"145","line":28,"column":10,"nodeType":"135","messageId":"136","endLine":28,"endColumn":15},{"ruleId":"133","severity":1,"message":"146","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":28},{"ruleId":"133","severity":1,"message":"147","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":12},{"ruleId":"133","severity":1,"message":"148","line":11,"column":3,"nodeType":"135","messageId":"136","endLine":11,"endColumn":7},{"ruleId":"133","severity":1,"message":"149","line":30,"column":3,"nodeType":"135","messageId":"136","endLine":30,"endColumn":22},{"ruleId":"133","severity":1,"message":"138","line":33,"column":9,"nodeType":"135","messageId":"136","endLine":33,"endColumn":15},{"ruleId":"133","severity":1,"message":"137","line":33,"column":17,"nodeType":"135","messageId":"136","endLine":33,"endColumn":23},{"ruleId":"133","severity":1,"message":"150","line":34,"column":9,"nodeType":"135","messageId":"136","endLine":34,"endColumn":13},{"ruleId":"133","severity":1,"message":"151","line":58,"column":22,"nodeType":"135","messageId":"136","endLine":58,"endColumn":35},{"ruleId":"129","replacedBy":"152"},{"ruleId":"131","replacedBy":"153"},{"ruleId":"133","severity":1,"message":"154","line":8,"column":10,"nodeType":"135","messageId":"136","endLine":8,"endColumn":21},{"ruleId":"133","severity":1,"message":"155","line":23,"column":10,"nodeType":"135","messageId":"136","endLine":23,"endColumn":14},{"ruleId":"133","severity":1,"message":"156","line":31,"column":3,"nodeType":"135","messageId":"136","endLine":31,"endColumn":18},{"ruleId":"133","severity":1,"message":"157","line":33,"column":3,"nodeType":"135","messageId":"136","endLine":33,"endColumn":14},{"ruleId":"133","severity":1,"message":"158","line":39,"column":10,"nodeType":"135","messageId":"136","endLine":39,"endColumn":28},{"ruleId":"139","severity":1,"message":"159","line":230,"column":8,"nodeType":"141","endLine":230,"endColumn":22,"suggestions":"160"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"161","line":8,"column":10,"nodeType":"135","messageId":"136","endLine":8,"endColumn":16},{"ruleId":"133","severity":1,"message":"162","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":22},{"ruleId":"133","severity":1,"message":"138","line":5,"column":9,"nodeType":"135","messageId":"136","endLine":5,"endColumn":15},{"ruleId":"133","severity":1,"message":"163","line":5,"column":17,"nodeType":"135","messageId":"136","endLine":5,"endColumn":24},{"ruleId":"133","severity":1,"message":"137","line":5,"column":26,"nodeType":"135","messageId":"136","endLine":5,"endColumn":32},{"ruleId":"133","severity":1,"message":"164","line":13,"column":7,"nodeType":"135","messageId":"136","endLine":13,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":21,"column":27,"nodeType":"167","messageId":"168","endLine":21,"endColumn":36},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","'Header' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchConnections'. Either include it or remove the dependency array. If 'fetchConnections' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["171"],"'getDefaultMiddleware' is defined but never used.","'Checkbox' is defined but never used.","'error' is assigned a value but never used.","'REMEMBER_TOKEN_KEY' is defined but never used.","'path' is defined but never used.","'Menu' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'Meta' is assigned a value but never used.","'setDailyQuote' is assigned a value but never used.",["169"],["170"],"'useSelector' is defined but never used.","'Call' is defined but never used.","'MessageOutlined' is defined but never used.","'ShopTwoTone' is defined but never used.","'HEARTBEAT_INTERVAL' is defined but never used.","React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.",["172"],"'Inmate' is defined but never used.","'UserOutlined' is defined but never used.","'Content' is assigned a value but never used.","'customIcons' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [fetchConnections, session.isLoggedIn]",{"range":"177","text":"178"},"Update the dependencies array to be: [isAuthed, messages, rc]",{"range":"179","text":"180"},[1393,1413],"[fetchConnections, session.isLoggedIn]",[6346,6360],"[isAuthed, messages, rc]"]