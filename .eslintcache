[{"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx":"1","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts":"2","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx":"3","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts":"4","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts":"5","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts":"6","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx":"7","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx":"8","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts":"9","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts":"10","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts":"11","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx":"12","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts":"13","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx":"14","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js":"15","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts":"16","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/menu/Sidebar.tsx":"17","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/utils.ts":"18","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/useUserMedia.ts":"19"},{"size":647,"mtime":1611065414699,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1611065414704,"results":"22","hashOfConfig":"21"},{"size":2295,"mtime":1611239371486,"results":"23","hashOfConfig":"21"},{"size":945,"mtime":1611148817492,"results":"24","hashOfConfig":"21"},{"size":1569,"mtime":1611153156296,"results":"25","hashOfConfig":"21"},{"size":1035,"mtime":1611176946880,"results":"26","hashOfConfig":"21"},{"size":658,"mtime":1611065414698,"results":"27","hashOfConfig":"21"},{"size":2643,"mtime":1611067379401,"results":"28","hashOfConfig":"21"},{"size":1119,"mtime":1611234032079,"results":"29","hashOfConfig":"21"},{"size":1824,"mtime":1611153155127,"results":"30","hashOfConfig":"21"},{"size":923,"mtime":1611153156075,"results":"31","hashOfConfig":"21"},{"size":5733,"mtime":1611176993902,"results":"32","hashOfConfig":"21"},{"size":476,"mtime":1611234034395,"results":"33","hashOfConfig":"21"},{"size":7695,"mtime":1611245504537,"results":"34","hashOfConfig":"21"},{"size":6333,"mtime":1611243259712,"results":"35","hashOfConfig":"21"},{"size":1101,"mtime":1611153156231,"results":"36","hashOfConfig":"21"},{"size":1143,"mtime":1611234032193,"results":"37","hashOfConfig":"21"},{"size":109,"mtime":1611165113717,"results":"38","hashOfConfig":"21"},{"size":738,"mtime":1611243263638,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1xn4t4d",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/index.tsx",[],["86","87"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/reportWebVitals.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/App.tsx",["88","89","90"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/index.ts",["91"],"import { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { History, createBrowserHistory } from \"history\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { sessionReducer } from \"./modules/session\";\nimport { callSlice } from \"./modules/call\";\nimport { connectionSlice } from \"./modules/connection\";\n\nexport const history = createBrowserHistory();\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    session: sessionReducer,\n    calls: callSlice.reducer,\n    connections: connectionSlice.reducer,\n    router: connectRouter(history),\n  });\nexport const rootReducer = createRootReducer(history);\n\nexport const Store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(routerMiddleware(history)),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/session.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/constants.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/hocs/ProtectedRoute.tsx",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Login/index.tsx",["92","93"],"import React, { useState, ReactElement } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Input, Layout, Button, Form, Checkbox } from \"antd\";\n\n// import { ReactComponent as Operator } from \"src/assets/avatars/bald.svg\";\n// import { ReactComponent as Supervisor } from \"src/assets/avatars/woman.svg\";\n// import { ReactComponent as Admin } from \"src/assets/avatars/professor.svg\";\n// import { ReactComponent as Investigator } from \"src/assets/avatars/investigator.svg\";\n// import { OPERATOR, SUPERVISOR, ADMIN, INVESTIGATOR } from \"src/data/sample\";\n\nimport \"./index.css\";\nimport { Redirect } from \"react-router\";\nimport { loginWithCredentials } from \"src/api/User\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\n\nconst { Content } = Layout;\n\nconst mapStateToProps = (state: RootState) => ({\n  session: state.session,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction LoginContainer({ session }: PropsFromRedux): ReactElement {\n  const [error, setError] = useState(\"\");\n\n  if (session.isLoggedIn) return <Redirect to=\"/\" />;\n\n  const onFinish = async (values: any) => {\n    try {\n      await loginWithCredentials({\n        inmateNumber: values.inmateNumber,\n        pin: values.pin,\n      });\n    } catch (err) {\n      setError(\"Invalid ID or Pin Code\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    setError(\"Invalid ID or Pin Code\");\n  };\n\n  return (\n    <Content>\n      <div className=\"login-form\">\n        <div className=\"login-form-right-column\" />\n        <Form\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            name=\"inmateNumber\"\n            rules={[{ required: true, message: \"Inmate ID is required.\" }]}\n          >\n            <Input\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Inmate Number\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"pin\"\n            rules={[{ required: true, message: \"Password is required.\" }]}\n          >\n            <Input.Password\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Pin Code\"\n            />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Content>\n  );\n}\n\nexport default connector(LoginContainer);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/User.ts",["94"],"import { API_URL, fetchTimeout } from \"./Common\";\nimport url from \"url\";\nimport { setSession } from \"src/redux/modules/session\";\nimport { Store } from \"src/redux\";\nimport { REMEMBER_TOKEN_KEY, TOKEN_KEY } from \"src/utils/constants\";\nimport { User } from \"src/types/User\";\n\nasync function initializeSession(body: any) {\n  const user = body.data.user as User;\n  const { token, id } = body.data.user;\n  Store.dispatch(\n    setSession({\n      user,\n      authInfo: { token, id, type: 'inmate' },\n      isLoggedIn: true,\n    })\n  );\n\n  // TO\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport async function loginWithCredentials(cred: {\n  inmateNumber: string;\n  pin: string;\n}): Promise<void> {\n  const response = await fetchTimeout(url.resolve(API_URL, \"inmate/auth\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      node_id: 2,\n      inmate_number: cred.inmateNumber,\n      pin: cred.pin,\n    }),\n  });\n  const body = await response.json();\n  if (body.status !== 200) throw body;\n  await initializeSession(body);\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/api/Common.ts",["95","96","97"],"import { Store } from \"src/redux\";\nimport url from \"url\";\nimport path from \"path\";\n// import { getApprovedConnections } from \"./Connection\";\n// import { getContacts, getInmates, getStaff } from \"./Persona\";\n\nexport const API_URL = `${process.env.REACT_APP_BASE_URL}api/`;\n\nexport interface ApiResponse {\n  date: number;\n  good: boolean;\n  status?: \"OK\" | \"ERROR\" | \"succeeded\" | 200;\n  message?: string;\n  data: Record<string, unknown> | Record<string, unknown>[] | unknown;\n}\n\nexport function fetchTimeout(\n  fetchUrl: string,\n  options: Record<string, unknown>,\n  timeout = 15000\n): Promise<Response> {\n  return Promise.race([\n    fetch(fetchUrl, { ...options, mode: \"cors\" }),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => reject(new Error(\"timeout\")), timeout)\n    ),\n  ]);\n}\n\nexport function toQueryString(options: string[][]) {\n  return options.map((x) => x[0] + \"=\" + encodeURIComponent(x[1])).join(\"&\");\n}\n\nexport async function fetchAuthenticated(\n  fetchUrl: string,\n  options: Record<string, unknown> = {},\n  timeout = 15000\n): Promise<ApiResponse> {\n  const state = Store.getState();\n\n  const requestOptions = {\n    ...options,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${state.session.authInfo.token}`,\n      [\"X-Ameelio-User-Type\"]: \"inmate\",\n      ['X-Ameelio-Inmate-Id']: `${state.session.authInfo.id}`\n    },\n  };\n\n  const response = await fetchTimeout(\n    path.join(API_URL, `inmate/${state.session.authInfo.id}`, fetchUrl),\n    requestOptions,\n    timeout\n  );\n\n  const body = await response.json();\n\n  return body;\n}\n\n// export async function initializeAppData() {\n//   await Promise.allSettled([\n//     getInmates(),\n//     getApprovedConnections(),\n//     getStaff(),\n//     getContacts(),\n//   ]);\n// }\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/call.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Dashboard/index.tsx",["98","99","100","101","102","103"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { RootState } from \"src/redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { fetchCalls } from \"src/redux/modules/call\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  Col,\n  Layout,\n  PageHeader,\n  Row,\n  Space,\n  Typography,\n} from \"antd\";\nimport { selectAllCalls, selectAllConnections } from \"src/redux/selectors\";\nimport { push } from \"connected-react-router\";\nimport { differenceInMinutes, format } from \"date-fns\";\nimport { QUOTES, WRAPPER_PADDING } from \"src/utils/constants\";\nimport { Call } from \"src/types/Call\";\nimport Banner from \"src/assets/Banner.jpg\";\nimport { getRandomItem } from \"src/utils/utils\";\nimport { Quote } from \"src/types/Common\";\nimport \"./index.css\";\nimport { Connection } from \"src/types/Connection\";\nimport {\n  EllipsisOutlined,\n  UserAddOutlined,\n  VideoCameraFilled,\n  VideoCameraOutlined,\n} from \"@ant-design/icons\";\nimport { Skeleton } from \"antd\";\n\nconst { Header, Footer, Sider, Content } = Layout;\nconst { Meta } = Card;\n\nconst mapStateToProps = (state: RootState) => ({\n  calls: selectAllCalls(state),\n  connections: selectAllConnections(state),\n  name: state.session.user.firstName,\n});\n\nconst mapDispatchToProps = { fetchCalls, push };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nfunction DashboardPage({\n  calls,\n  connections,\n  fetchCalls,\n  push,\n  name,\n}: PropsFromRedux): ReactElement {\n  const [appointments, setAppointments] = useState<\n    { call: Call; connection: Connection }[]\n  >([]);\n  const [dailyQuote, setDailyQuote] = useState(getRandomItem(QUOTES) as Quote);\n\n  useEffect(() => {\n    (async () => await fetchCalls())();\n  }, [fetchCalls]);\n\n  useEffect(() => {\n    // TODO sort\n    const upcoming = calls\n      .filter((call) => call.status === \"scheduled\" || call.status === \"live\")\n      .map((call) => ({\n        call,\n        connection:\n          connections.find((connection) => connection.id === call.id) ||\n          ({\n            user: { firstName: \"\", lastName: \"\", profileImgPath: \"\" },\n          } as Connection),\n      }));\n\n    setAppointments(upcoming);\n  }, [calls, connections]);\n\n  return (\n    <Layout>\n      <Content>\n        <PageHeader title={`Hi ${name}!`}></PageHeader>\n        <Space direction=\"vertical\" size=\"large\" style={WRAPPER_PADDING}>\n          <Row>\n            <Col span={24}>\n              <div>\n                <Space\n                  direction=\"vertical\"\n                  align=\"center\"\n                  style={{ backgroundImage: `url(${Banner})`, width: \"100%\" }}\n                  className=\"dashboard-header-container\"\n                >\n                  <Typography.Title\n                    level={3}\n                    className=\"dashboard-header-content\"\n                  >\n                    {format(new Date(), \"HH:mm\")}\n                  </Typography.Title>\n                  <Typography.Title\n                    level={5}\n                    className=\"dashboard-header-content\"\n                  >\n                    {dailyQuote.quote}\n                  </Typography.Title>\n                  <Typography.Text className=\"dashboard-header-content\">\n                    {dailyQuote.author}\n                  </Typography.Text>\n                </Space>\n                <div style={{ width: \"100%\", backgroundColor: \"white\" }}>\n                  {appointments.map((appointment) => (\n                    <Card>\n                      <Space size=\"large\">\n                        <Avatar\n                          src={appointment.connection.user.profileImgPath}\n                        />\n                        <div>\n                          <Typography.Title level={3}>\n                            Call with {appointment.connection.user.firstName}\n                          </Typography.Title>\n                          <Typography.Text>\n                            {format(new Date(appointment.call.start), \"HH:mm\")}{\" \"}\n                            - {format(new Date(appointment.call.end), \"HH:mm\")}{\" \"}\n                            | starts in{\" \"}\n                            {differenceInMinutes(\n                              new Date(),\n                              new Date(appointment.call.start)\n                            )}{\" \"}\n                            minutes\n                          </Typography.Text>\n                        </div>\n                        <Space>\n                          <Button\n                            onClick={() => push(`call/${appointment.call.id}`)}\n                          >\n                            <EllipsisOutlined />\n                          </Button>\n                          <Button\n                            type=\"primary\"\n                            onClick={() => push(`call/${appointment.call.id}`)}\n                          >\n                            Join\n                          </Button>\n                        </Space>\n                      </Space>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={12}>\n              <Card>\n                <VideoCameraFilled />\n                <Typography.Title level={4}>Schedule Call</Typography.Title>\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card>\n                <UserAddOutlined />\n                <Typography.Title level={4}>Add Contact</Typography.Title>\n              </Card>\n            </Col>\n          </Row>\n        </Space>\n      </Content>\n      <Sider theme=\"light\">Sider</Sider>\n    </Layout>\n  );\n}\n\nexport default connector(DashboardPage);\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/selectors.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/index.tsx",["104","105"],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/RoomClient.js",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/redux/modules/connection.ts",["106"],"import {\n  createSlice,\n  createEntityAdapter,\n  createAsyncThunk,\n} from \"@reduxjs/toolkit\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { Connection } from \"src/types/Connection\";\nimport { Inmate } from \"src/types/User\";\nimport { fetchAuthenticated } from \"src/api/Common\";\n\nexport const fetchConnections = createAsyncThunk(\n  \"connections/fetchAll\",\n  async () => {\n    const body = await fetchAuthenticated(`/connections`);\n    if (body.status !== 200) {\n      throw body;\n    }\n\n    const connections = ((body.data as Record<string, unknown>)\n      .connections as Connection[]).map((inmate) => camelcaseKeys(inmate));\n\n    return connections;\n  }\n);\n\nexport const connectionAdapter = createEntityAdapter<Connection>();\n\nexport const connectionSlice = createSlice({\n  name: \"connection\",\n  initialState: connectionAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchConnections.fulfilled, (state, action) => {\n      connectionAdapter.setAll(state, action.payload);\n    });\n  },\n});\n\nexport const connectionActions = connectionSlice.actions;\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/components/menu/Sidebar.tsx",["107","108","109"],"import React, { ReactElement, useState } from \"react\";\nimport { Menu, Layout } from \"antd\";\nimport { UserOutlined, HomeOutlined } from \"@ant-design/icons\";\n\nconst { Header, Content, Footer, Sider } = Layout;\ninterface Props {\n  navigate: (path: string) => void;\n  isVisible: boolean;\n  pathname: string;\n}\n\nexport default function Sidebar({ navigate, isVisible, pathname }: Props): ReactElement {\n  const [collapsed, setCollapsed] = useState(false);\n\n  if (!isVisible || pathname.indexOf('call') !== -1) return <div />;\n  return (\n    <Sider\n      theme=\"light\"\n      collapsible\n      collapsed={collapsed}\n      onCollapse={() => setCollapsed((collapsed) => !collapsed)}\n    >\n      <div className=\"logo\" />\n      <Menu mode=\"inline\" defaultSelectedKeys={[\"home\"]}>\n        <Menu.Item\n          key=\"home\"\n          icon={<HomeOutlined />}\n          onClick={() => navigate(\"home\")}\n        >\n          Home\n        </Menu.Item>\n        <Menu.Item\n          key=\"contacts\"\n          icon={<UserOutlined />}\n          onClick={() => navigate(\"home\")}\n        >\n          Contacts\n        </Menu.Item>\n      </Menu>\n    </Sider>\n  );\n}\n","/Users/gabrielsaruhashi/Ameelio/pathways-client/src/utils/utils.ts",[],"/Users/gabrielsaruhashi/Ameelio/pathways-client/src/pages/Call/useUserMedia.ts",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":12},{"ruleId":"114","severity":1,"message":"118","line":19,"column":17,"nodeType":"116","messageId":"117","endLine":19,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":45,"column":6,"nodeType":"121","endLine":45,"endColumn":26,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":4,"column":26,"nodeType":"116","messageId":"117","endLine":4,"endColumn":46},{"ruleId":"114","severity":1,"message":"124","line":4,"column":39,"nodeType":"116","messageId":"117","endLine":4,"endColumn":47},{"ruleId":"114","severity":1,"message":"125","line":28,"column":10,"nodeType":"116","messageId":"117","endLine":28,"endColumn":15},{"ruleId":"114","severity":1,"message":"126","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":28},{"ruleId":"114","severity":1,"message":"127","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":11},{"ruleId":"128","severity":1,"message":"129","line":47,"column":7,"nodeType":"130","messageId":"131","endLine":47,"endColumn":40,"fix":"132"},{"ruleId":"128","severity":1,"message":"133","line":48,"column":7,"nodeType":"130","messageId":"131","endLine":48,"endColumn":62,"fix":"134"},{"ruleId":"114","severity":1,"message":"135","line":30,"column":3,"nodeType":"116","messageId":"117","endLine":30,"endColumn":22},{"ruleId":"114","severity":1,"message":"136","line":32,"column":10,"nodeType":"116","messageId":"117","endLine":32,"endColumn":18},{"ruleId":"114","severity":1,"message":"118","line":34,"column":9,"nodeType":"116","messageId":"117","endLine":34,"endColumn":15},{"ruleId":"114","severity":1,"message":"137","line":34,"column":17,"nodeType":"116","messageId":"117","endLine":34,"endColumn":23},{"ruleId":"114","severity":1,"message":"138","line":35,"column":9,"nodeType":"116","messageId":"117","endLine":35,"endColumn":13},{"ruleId":"114","severity":1,"message":"139","line":59,"column":22,"nodeType":"116","messageId":"117","endLine":59,"endColumn":35},{"ruleId":"114","severity":1,"message":"140","line":8,"column":10,"nodeType":"116","messageId":"117","endLine":8,"endColumn":21},{"ruleId":"114","severity":1,"message":"141","line":14,"column":10,"nodeType":"116","messageId":"117","endLine":14,"endColumn":14},{"ruleId":"114","severity":1,"message":"142","line":8,"column":10,"nodeType":"116","messageId":"117","endLine":8,"endColumn":16},{"ruleId":"114","severity":1,"message":"118","line":5,"column":9,"nodeType":"116","messageId":"117","endLine":5,"endColumn":15},{"ruleId":"114","severity":1,"message":"143","line":5,"column":17,"nodeType":"116","messageId":"117","endLine":5,"endColumn":24},{"ruleId":"114","severity":1,"message":"137","line":5,"column":26,"nodeType":"116","messageId":"117","endLine":5,"endColumn":32},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Header' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchConnections'. Either include it or remove the dependency array. If 'fetchConnections' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["146"],"'getDefaultMiddleware' is defined but never used.","'Checkbox' is defined but never used.","'error' is assigned a value but never used.","'REMEMBER_TOKEN_KEY' is defined but never used.","'url' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"X-Ameelio-User-Type\"] found.","Property","unnecessarilyComputedProperty",{"range":"147","text":"148"},"Unnecessarily computed property ['X-Ameelio-Inmate-Id'] found.",{"range":"149","text":"150"},"'VideoCameraOutlined' is defined but never used.","'Skeleton' is defined but never used.","'Footer' is assigned a value but never used.","'Meta' is assigned a value but never used.","'setDailyQuote' is assigned a value but never used.","'useSelector' is defined but never used.","'Call' is defined but never used.","'Inmate' is defined but never used.","'Content' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},[1318,1341],"\"X-Ameelio-User-Type\"",[1359,1382],"'X-Ameelio-Inmate-Id'","Update the dependencies array to be: [fetchConnections, session.isLoggedIn]",{"range":"153","text":"154"},[1383,1403],"[fetchConnections, session.isLoggedIn]"]